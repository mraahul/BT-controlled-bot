
remoteControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e8  20000068  08003978  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000250  08003978  00020250  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011828  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002700  00000000  00000000  000318c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008053  00000000  00000000  00033fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c38  00000000  00000000  0003c018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ef8  00000000  00000000  0003cc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000060c7  00000000  00000000  0003db48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b0f  00000000  00000000  00043c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004871e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002998  00000000  00000000  0004879c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003798 	.word	0x08003798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003798 	.word	0x08003798

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_InitTick+0x2c>)
{
 8000584:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f88c 	bl	80006ac <HAL_SYSTICK_Config>
 8000594:	4604      	mov	r4, r0
 8000596:	b938      	cbnz	r0, 80005a8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000598:	4602      	mov	r2, r0
 800059a:	4629      	mov	r1, r5
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f844 	bl	800062c <HAL_NVIC_SetPriority>
 80005a4:	4620      	mov	r0, r4
 80005a6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_Init>:
{
 80005b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f828 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ffe1 	bl	8000580 <HAL_InitTick>
 80005be:	4604      	mov	r4, r0
 80005c0:	b918      	cbnz	r0, 80005ca <HAL_Init+0x1a>
    HAL_MspInit();
 80005c2:	f001 ffcb 	bl	800255c <HAL_MspInit>
}
 80005c6:	4620      	mov	r0, r4
 80005c8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005ca:	2401      	movs	r4, #1
 80005cc:	e7fb      	b.n	80005c6 <HAL_Init+0x16>
	...

080005d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d0:	4a02      	ldr	r2, [pc, #8]	; (80005dc <HAL_IncTick+0xc>)
 80005d2:	6813      	ldr	r3, [r2, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000094 	.word	0x20000094

080005e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_GetTick+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
 80005ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff fff6 	bl	80005e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005f6:	4605      	mov	r5, r0
  {
    wait++;
 80005f8:	bf18      	it	ne
 80005fa:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fc:	f7ff fff0 	bl	80005e0 <HAL_GetTick>
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d8fa      	bhi.n	80005fc <HAL_Delay+0x10>
  {
  }
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}

08000608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800060a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	0c1b      	lsrs	r3, r3, #16
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	0200      	lsls	r0, r0, #8
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000622:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000624:	60d3      	str	r3, [r2, #12]
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	68dc      	ldr	r4, [r3, #12]
 8000632:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000636:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	2b04      	cmp	r3, #4
 800063e:	bf28      	it	cs
 8000640:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 0501 	mov.w	r5, #1
 8000648:	fa05 f303 	lsl.w	r3, r5, r3
 800064c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000650:	bf8c      	ite	hi
 8000652:	3c03      	subhi	r4, #3
 8000654:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000656:	4019      	ands	r1, r3
 8000658:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065a:	fa05 f404 	lsl.w	r4, r5, r4
 800065e:	3c01      	subs	r4, #1
 8000660:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000662:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	ea42 0201 	orr.w	r2, r2, r1
 8000668:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	bfaf      	iteee	ge
 800066e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	f000 000f 	andlt.w	r0, r0, #15
 8000676:	4b06      	ldrlt	r3, [pc, #24]	; (8000690 <HAL_NVIC_SetPriority+0x64>)
 8000678:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	bfa5      	ittet	ge
 800067c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000680:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000ed14 	.word	0xe000ed14

08000694 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000694:	0942      	lsrs	r2, r0, #5
 8000696:	2301      	movs	r3, #1
 8000698:	f000 001f 	and.w	r0, r0, #31
 800069c:	fa03 f000 	lsl.w	r0, r3, r0
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_NVIC_EnableIRQ+0x14>)
 80006a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ac:	3801      	subs	r0, #1
 80006ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b2:	d20a      	bcs.n	80006ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e010 	.word	0xe000e010
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80006d8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80006da:	2800      	cmp	r0, #0
 80006dc:	d04e      	beq.n	800077c <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80006de:	6801      	ldr	r1, [r0, #0]
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <HAL_DMA_Init+0xa8>)
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f04f 0414 	mov.w	r4, #20
 80006e8:	d840      	bhi.n	800076c <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <HAL_DMA_Init+0xac>)
 80006ec:	440a      	add	r2, r1
 80006ee:	fbb2 f2f4 	udiv	r2, r2, r4
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80006f6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80006fa:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000702:	6884      	ldr	r4, [r0, #8]
 8000704:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000706:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000708:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800070a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800070c:	432b      	orrs	r3, r5
 800070e:	6945      	ldr	r5, [r0, #20]
 8000710:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000712:	6985      	ldr	r5, [r0, #24]
 8000714:	432b      	orrs	r3, r5
 8000716:	69c5      	ldr	r5, [r0, #28]
 8000718:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800071a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800071c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000720:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000724:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000726:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000728:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800072c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800072e:	d014      	beq.n	800075a <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000730:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_DMA_Init+0xb0>)
 8000734:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000736:	bf0c      	ite	eq
 8000738:	4914      	ldreq	r1, [pc, #80]	; (800078c <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800073a:	4915      	ldrne	r1, [pc, #84]	; (8000790 <HAL_DMA_Init+0xb8>)
 800073c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800073e:	680a      	ldr	r2, [r1, #0]
 8000740:	f003 031c 	and.w	r3, r3, #28
 8000744:	240f      	movs	r4, #15
 8000746:	409c      	lsls	r4, r3
 8000748:	ea22 0204 	bic.w	r2, r2, r4
 800074c:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800074e:	6842      	ldr	r2, [r0, #4]
 8000750:	680c      	ldr	r4, [r1, #0]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	4323      	orrs	r3, r4
 8000758:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075a:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800075c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000760:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8000764:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8000768:	4618      	mov	r0, r3
 800076a:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_DMA_Init+0xbc>)
 800076e:	440b      	add	r3, r1
 8000770:	fbb3 f3f4 	udiv	r3, r3, r4
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_DMA_Init+0xc0>)
 800077a:	e7be      	b.n	80006fa <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 800077c:	2001      	movs	r0, #1
}
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	40020407 	.word	0x40020407
 8000784:	bffdfff8 	.word	0xbffdfff8
 8000788:	40020000 	.word	0x40020000
 800078c:	400200a8 	.word	0x400200a8
 8000790:	400204a8 	.word	0x400204a8
 8000794:	bffdfbf8 	.word	0xbffdfbf8
 8000798:	40020400 	.word	0x40020400

0800079c <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800079c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800079e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80007a0:	6803      	ldr	r3, [r0, #0]
{
 80007a2:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80007a4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007a8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007aa:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80007ac:	2404      	movs	r4, #4
 80007ae:	4094      	lsls	r4, r2
 80007b0:	4226      	tst	r6, r4
 80007b2:	d00e      	beq.n	80007d2 <HAL_DMA_IRQHandler+0x36>
 80007b4:	f015 0f04 	tst.w	r5, #4
 80007b8:	d00b      	beq.n	80007d2 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007be:	bf5e      	ittt	pl
 80007c0:	681a      	ldrpl	r2, [r3, #0]
 80007c2:	f022 0204 	bicpl.w	r2, r2, #4
 80007c6:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80007c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80007ca:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80007cc:	b373      	cbz	r3, 800082c <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80007ce:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80007d0:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80007d2:	2402      	movs	r4, #2
 80007d4:	4094      	lsls	r4, r2
 80007d6:	4226      	tst	r6, r4
 80007d8:	d012      	beq.n	8000800 <HAL_DMA_IRQHandler+0x64>
 80007da:	f015 0f02 	tst.w	r5, #2
 80007de:	d00f      	beq.n	8000800 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	0695      	lsls	r5, r2, #26
 80007e4:	d406      	bmi.n	80007f4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	f022 020a 	bic.w	r2, r2, #10
 80007ec:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80007f4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80007f6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80007f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80007fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007fe:	e7e5      	b.n	80007cc <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000800:	2408      	movs	r4, #8
 8000802:	4094      	lsls	r4, r2
 8000804:	4234      	tst	r4, r6
 8000806:	d011      	beq.n	800082c <HAL_DMA_IRQHandler+0x90>
 8000808:	072c      	lsls	r4, r5, #28
 800080a:	d50f      	bpl.n	800082c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800080c:	681c      	ldr	r4, [r3, #0]
 800080e:	f024 040e 	bic.w	r4, r4, #14
 8000812:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000814:	2301      	movs	r3, #1
 8000816:	fa03 f202 	lsl.w	r2, r3, r2
 800081a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800081c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800081e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000822:	2300      	movs	r3, #0
 8000824:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000828:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800082a:	e7cf      	b.n	80007cc <HAL_DMA_IRQHandler+0x30>
}
 800082c:	bc70      	pop	{r4, r5, r6}
 800082e:	4770      	bx	lr

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000834:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000994 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800083c:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083e:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000840:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000844:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	9c01      	ldr	r4, [sp, #4]
 8000848:	40dc      	lsrs	r4, r3
 800084a:	d102      	bne.n	8000852 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 800084c:	b005      	add	sp, #20
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000852:	2401      	movs	r4, #1
 8000854:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000858:	9c01      	ldr	r4, [sp, #4]
 800085a:	ea14 050a 	ands.w	r5, r4, sl
 800085e:	f000 808f 	beq.w	8000980 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	684c      	ldr	r4, [r1, #4]
 8000864:	f024 0b10 	bic.w	fp, r4, #16
 8000868:	f1bb 0f02 	cmp.w	fp, #2
 800086c:	d111      	bne.n	8000892 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 800086e:	08df      	lsrs	r7, r3, #3
 8000870:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000874:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000878:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800087a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800087e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000882:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000886:	690e      	ldr	r6, [r1, #16]
 8000888:	fa06 f60e 	lsl.w	r6, r6, lr
 800088c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000890:	623e      	str	r6, [r7, #32]
 8000892:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000896:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000898:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800089a:	fa07 f70c 	lsl.w	r7, r7, ip
 800089e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008a0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008a4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008a6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008aa:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ae:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80008b6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b8:	d811      	bhi.n	80008de <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80008ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008bc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	68ce      	ldr	r6, [r1, #12]
 80008c2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80008c6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80008ca:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008cc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ce:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008d2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80008d6:	409e      	lsls	r6, r3
 80008d8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80008dc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80008de:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008e0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e2:	688e      	ldr	r6, [r1, #8]
 80008e4:	fa06 f60c 	lsl.w	r6, r6, ip
 80008e8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ea:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80008ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ee:	d547      	bpl.n	8000980 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80008f4:	f046 0601 	orr.w	r6, r6, #1
 80008f8:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80008fc:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000900:	f023 0703 	bic.w	r7, r3, #3
 8000904:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000908:	f006 0601 	and.w	r6, r6, #1
 800090c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000910:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000912:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000918:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800091a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800091e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000922:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000926:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800092a:	d02b      	beq.n	8000984 <HAL_GPIO_Init+0x154>
 800092c:	4e18      	ldr	r6, [pc, #96]	; (8000990 <HAL_GPIO_Init+0x160>)
 800092e:	42b0      	cmp	r0, r6
 8000930:	d02a      	beq.n	8000988 <HAL_GPIO_Init+0x158>
 8000932:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000936:	42b0      	cmp	r0, r6
 8000938:	bf14      	ite	ne
 800093a:	2607      	movne	r6, #7
 800093c:	2602      	moveq	r6, #2
 800093e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000942:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000946:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000948:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800094a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800094c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000950:	bf0c      	ite	eq
 8000952:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000954:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000956:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000958:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800095a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800095e:	bf0c      	ite	eq
 8000960:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000962:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000964:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000966:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000968:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800096c:	bf0c      	ite	eq
 800096e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000970:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000972:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000974:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000976:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000978:	bf54      	ite	pl
 800097a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800097c:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800097e:	60d6      	str	r6, [r2, #12]
    position++;
 8000980:	3301      	adds	r3, #1
 8000982:	e760      	b.n	8000846 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000984:	2600      	movs	r6, #0
 8000986:	e7da      	b.n	800093e <HAL_GPIO_Init+0x10e>
 8000988:	2601      	movs	r6, #1
 800098a:	e7d8      	b.n	800093e <HAL_GPIO_Init+0x10e>
 800098c:	40010400 	.word	0x40010400
 8000990:	48000400 	.word	0x48000400
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000998:	b10a      	cbz	r2, 800099e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800099a:	6181      	str	r1, [r0, #24]
 800099c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800099e:	6281      	str	r1, [r0, #40]	; 0x28
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009a4:	4a02      	ldr	r2, [pc, #8]	; (80009b0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80009a6:	6813      	ldr	r3, [r2, #0]
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	4770      	bx	lr
 80009b0:	40007000 	.word	0x40007000

080009b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80009b6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80009b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009c6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009cc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d0:	d11c      	bne.n	8000a0c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80009d6:	d015      	beq.n	8000a04 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009e2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009e4:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80009e6:	6811      	ldr	r1, [r2, #0]
 80009e8:	2232      	movs	r2, #50	; 0x32
 80009ea:	434a      	muls	r2, r1
 80009ec:	490f      	ldr	r1, [pc, #60]	; (8000a2c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80009ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80009f2:	4619      	mov	r1, r3
 80009f4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009f6:	6958      	ldr	r0, [r3, #20]
 80009f8:	0540      	lsls	r0, r0, #21
 80009fa:	d500      	bpl.n	80009fe <HAL_PWREx_ControlVoltageScaling+0x3a>
 80009fc:	b922      	cbnz	r2, 8000a08 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009fe:	694b      	ldr	r3, [r1, #20]
 8000a00:	055b      	lsls	r3, r3, #21
 8000a02:	d40d      	bmi.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a04:	2000      	movs	r0, #0
 8000a06:	4770      	bx	lr
        wait_loop_index--;
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	e7f4      	b.n	80009f6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a0c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a10:	bf1f      	itttt	ne
 8000a12:	681a      	ldrne	r2, [r3, #0]
 8000a14:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000a18:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000a1c:	601a      	strne	r2, [r3, #0]
 8000a1e:	e7f1      	b.n	8000a04 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000a20:	2003      	movs	r0, #3
}
 8000a22:	4770      	bx	lr
 8000a24:	40007000 	.word	0x40007000
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	000f4240 	.word	0x000f4240

08000a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a32:	4d1e      	ldr	r5, [pc, #120]	; (8000aac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000a34:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a36:	00da      	lsls	r2, r3, #3
{
 8000a38:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a3a:	d518      	bpl.n	8000a6e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000a3c:	f7ff ffba 	bl	80009b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a44:	d123      	bne.n	8000a8e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000a46:	2c80      	cmp	r4, #128	; 0x80
 8000a48:	d929      	bls.n	8000a9e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000a4a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000a4c:	bf8c      	ite	hi
 8000a4e:	2002      	movhi	r0, #2
 8000a50:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f023 0307 	bic.w	r3, r3, #7
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000a64:	1a18      	subs	r0, r3, r0
 8000a66:	bf18      	it	ne
 8000a68:	2001      	movne	r0, #1
 8000a6a:	b003      	add	sp, #12
 8000a6c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a76:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000a80:	f7ff ff98 	bl	80009b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000a84:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a8c:	e7d8      	b.n	8000a40 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000a8e:	2c80      	cmp	r4, #128	; 0x80
 8000a90:	d807      	bhi.n	8000aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000a92:	d008      	beq.n	8000aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000a94:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000a98:	4258      	negs	r0, r3
 8000a9a:	4158      	adcs	r0, r3
 8000a9c:	e7d9      	b.n	8000a52 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	e7d7      	b.n	8000a52 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	e7d5      	b.n	8000a52 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	e7d3      	b.n	8000a52 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8000ab6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ab8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000aba:	f012 020c 	ands.w	r2, r2, #12
 8000abe:	d005      	beq.n	8000acc <HAL_RCC_GetSysClockFreq+0x18>
 8000ac0:	2a0c      	cmp	r2, #12
 8000ac2:	d115      	bne.n	8000af0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ac4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000ac8:	2901      	cmp	r1, #1
 8000aca:	d118      	bne.n	8000afe <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000acc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000ace:	4820      	ldr	r0, [pc, #128]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ad0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ad2:	bf55      	itete	pl
 8000ad4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ad8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ada:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ade:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000ae2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ae6:	b382      	cbz	r2, 8000b4a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000ae8:	2a0c      	cmp	r2, #12
 8000aea:	d009      	beq.n	8000b00 <HAL_RCC_GetSysClockFreq+0x4c>
 8000aec:	2000      	movs	r0, #0
  return sysclockfreq;
 8000aee:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000af0:	2a04      	cmp	r2, #4
 8000af2:	d029      	beq.n	8000b48 <HAL_RCC_GetSysClockFreq+0x94>
 8000af4:	2a08      	cmp	r2, #8
 8000af6:	4817      	ldr	r0, [pc, #92]	; (8000b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000af8:	bf18      	it	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000afe:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b00:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b02:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b04:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b08:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000b0c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b0e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000b12:	d005      	beq.n	8000b20 <HAL_RCC_GetSysClockFreq+0x6c>
 8000b14:	2903      	cmp	r1, #3
 8000b16:	d012      	beq.n	8000b3e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b18:	68d9      	ldr	r1, [r3, #12]
 8000b1a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000b1e:	e003      	b.n	8000b28 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b20:	68d9      	ldr	r1, [r3, #12]
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000b24:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b28:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b2a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b2e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000b32:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b34:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b36:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000b42:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000b46:	e7ef      	b.n	8000b28 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	08003838 	.word	0x08003838
 8000b54:	007a1200 	.word	0x007a1200
 8000b58:	00f42400 	.word	0x00f42400

08000b5c <HAL_RCC_OscConfig>:
{
 8000b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000b60:	4605      	mov	r5, r0
 8000b62:	b908      	cbnz	r0, 8000b68 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000b64:	2001      	movs	r0, #1
 8000b66:	e046      	b.n	8000bf6 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b68:	4ca8      	ldr	r4, [pc, #672]	; (8000e0c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b6a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b6c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b6e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b70:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b72:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b76:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b7a:	d572      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b7c:	b11e      	cbz	r6, 8000b86 <HAL_RCC_OscConfig+0x2a>
 8000b7e:	2e0c      	cmp	r6, #12
 8000b80:	d151      	bne.n	8000c26 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000b82:	2f01      	cmp	r7, #1
 8000b84:	d14f      	bne.n	8000c26 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	0798      	lsls	r0, r3, #30
 8000b8a:	d502      	bpl.n	8000b92 <HAL_RCC_OscConfig+0x36>
 8000b8c:	69ab      	ldr	r3, [r5, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0e8      	beq.n	8000b64 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	6a28      	ldr	r0, [r5, #32]
 8000b96:	0719      	lsls	r1, r3, #28
 8000b98:	bf56      	itet	pl
 8000b9a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000b9e:	6823      	ldrmi	r3, [r4, #0]
 8000ba0:	091b      	lsrpl	r3, r3, #4
 8000ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ba6:	4283      	cmp	r3, r0
 8000ba8:	d228      	bcs.n	8000bfc <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000baa:	f7ff ff41 	bl	8000a30 <RCC_SetFlashLatencyFromMSIRange>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d1d8      	bne.n	8000b64 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	6a2a      	ldr	r2, [r5, #32]
 8000bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bc6:	6863      	ldr	r3, [r4, #4]
 8000bc8:	69ea      	ldr	r2, [r5, #28]
 8000bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000bce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000bd2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000bd4:	f7ff ff6e 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8000bd8:	68a3      	ldr	r3, [r4, #8]
 8000bda:	4a8d      	ldr	r2, [pc, #564]	; (8000e10 <HAL_RCC_OscConfig+0x2b4>)
 8000bdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	40d8      	lsrs	r0, r3
 8000be8:	4b8a      	ldr	r3, [pc, #552]	; (8000e14 <HAL_RCC_OscConfig+0x2b8>)
 8000bea:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fcc7 	bl	8000580 <HAL_InitTick>
        if(status != HAL_OK)
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d035      	beq.n	8000c62 <HAL_RCC_OscConfig+0x106>
}
 8000bf6:	b003      	add	sp, #12
 8000bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6023      	str	r3, [r4, #0]
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c0e:	6863      	ldr	r3, [r4, #4]
 8000c10:	69ea      	ldr	r2, [r5, #28]
 8000c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c1a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c1c:	f7ff ff08 	bl	8000a30 <RCC_SetFlashLatencyFromMSIRange>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d0d7      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x78>
 8000c24:	e79e      	b.n	8000b64 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c26:	69ab      	ldr	r3, [r5, #24]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d03a      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcd4 	bl	80005e0 <HAL_GetTick>
 8000c38:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	079a      	lsls	r2, r3, #30
 8000c3e:	d528      	bpl.n	8000c92 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6023      	str	r3, [r4, #0]
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	6a2a      	ldr	r2, [r5, #32]
 8000c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c50:	4313      	orrs	r3, r2
 8000c52:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c54:	6863      	ldr	r3, [r4, #4]
 8000c56:	69ea      	ldr	r2, [r5, #28]
 8000c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c60:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	07d8      	lsls	r0, r3, #31
 8000c66:	d42d      	bmi.n	8000cc4 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c68:	682b      	ldr	r3, [r5, #0]
 8000c6a:	0799      	lsls	r1, r3, #30
 8000c6c:	d46b      	bmi.n	8000d46 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	0718      	lsls	r0, r3, #28
 8000c72:	f100 80a0 	bmi.w	8000db6 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	0759      	lsls	r1, r3, #29
 8000c7a:	f100 80cd 	bmi.w	8000e18 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	0699      	lsls	r1, r3, #26
 8000c82:	f100 8136 	bmi.w	8000ef2 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 815c 	bne.w	8000f46 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e7b1      	b.n	8000bf6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c92:	f7ff fca5 	bl	80005e0 <HAL_GetTick>
 8000c96:	eba0 0008 	sub.w	r0, r0, r8
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9cd      	bls.n	8000c3a <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	e7a9      	b.n	8000bf6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	f023 0301 	bic.w	r3, r3, #1
 8000ca8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000caa:	f7ff fc99 	bl	80005e0 <HAL_GetTick>
 8000cae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	079b      	lsls	r3, r3, #30
 8000cb4:	d5d5      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cb6:	f7ff fc93 	bl	80005e0 <HAL_GetTick>
 8000cba:	eba0 0008 	sub.w	r0, r0, r8
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f6      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x154>
 8000cc2:	e7ec      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000cc4:	2e08      	cmp	r6, #8
 8000cc6:	d003      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x174>
 8000cc8:	2e0c      	cmp	r6, #12
 8000cca:	d108      	bne.n	8000cde <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000ccc:	2f03      	cmp	r7, #3
 8000cce:	d106      	bne.n	8000cde <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	039a      	lsls	r2, r3, #14
 8000cd4:	d5c8      	bpl.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000cd6:	686b      	ldr	r3, [r5, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1c5      	bne.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000cdc:	e742      	b.n	8000b64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cde:	686b      	ldr	r3, [r5, #4]
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce4:	d110      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1ac>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc77 	bl	80005e0 <HAL_GetTick>
 8000cf2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	039b      	lsls	r3, r3, #14
 8000cf8:	d4b6      	bmi.n	8000c68 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fc71 	bl	80005e0 <HAL_GetTick>
 8000cfe:	eba0 0008 	sub.w	r0, r0, r8
 8000d02:	2864      	cmp	r0, #100	; 0x64
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x198>
 8000d06:	e7ca      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d0c:	d104      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1bc>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	e7e6      	b.n	8000ce6 <HAL_RCC_OscConfig+0x18a>
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d1e:	6022      	str	r2, [r4, #0]
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d26:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e0      	bne.n	8000cee <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fc58 	bl	80005e0 <HAL_GetTick>
 8000d30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	0398      	lsls	r0, r3, #14
 8000d36:	d597      	bpl.n	8000c68 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc52 	bl	80005e0 <HAL_GetTick>
 8000d3c:	eba0 0008 	sub.w	r0, r0, r8
 8000d40:	2864      	cmp	r0, #100	; 0x64
 8000d42:	d9f6      	bls.n	8000d32 <HAL_RCC_OscConfig+0x1d6>
 8000d44:	e7ab      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d46:	2e04      	cmp	r6, #4
 8000d48:	d003      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
 8000d4a:	2e0c      	cmp	r6, #12
 8000d4c:	d110      	bne.n	8000d70 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000d4e:	2f02      	cmp	r7, #2
 8000d50:	d10e      	bne.n	8000d70 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	0559      	lsls	r1, r3, #21
 8000d56:	d503      	bpl.n	8000d60 <HAL_RCC_OscConfig+0x204>
 8000d58:	68eb      	ldr	r3, [r5, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f43f af02 	beq.w	8000b64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	692a      	ldr	r2, [r5, #16]
 8000d64:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000d68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d6c:	6063      	str	r3, [r4, #4]
 8000d6e:	e77e      	b.n	8000c6e <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d70:	68eb      	ldr	r3, [r5, #12]
 8000d72:	b17b      	cbz	r3, 8000d94 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc30 	bl	80005e0 <HAL_GetTick>
 8000d80:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	055a      	lsls	r2, r3, #21
 8000d86:	d4eb      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc2a 	bl	80005e0 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d9f7      	bls.n	8000d82 <HAL_RCC_OscConfig+0x226>
 8000d92:	e784      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc20 	bl	80005e0 <HAL_GetTick>
 8000da0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	055b      	lsls	r3, r3, #21
 8000da6:	f57f af62 	bpl.w	8000c6e <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc19 	bl	80005e0 <HAL_GetTick>
 8000dae:	1bc0      	subs	r0, r0, r7
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9f6      	bls.n	8000da2 <HAL_RCC_OscConfig+0x246>
 8000db4:	e773      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db6:	696b      	ldr	r3, [r5, #20]
 8000db8:	b19b      	cbz	r3, 8000de2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8000dba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fc0b 	bl	80005e0 <HAL_GetTick>
 8000dca:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dcc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dd0:	079a      	lsls	r2, r3, #30
 8000dd2:	f53f af50 	bmi.w	8000c76 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fc03 	bl	80005e0 <HAL_GetTick>
 8000dda:	1bc0      	subs	r0, r0, r7
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f5      	bls.n	8000dcc <HAL_RCC_OscConfig+0x270>
 8000de0:	e75d      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8000de2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000de6:	f023 0301 	bic.w	r3, r3, #1
 8000dea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000dee:	f7ff fbf7 	bl	80005e0 <HAL_GetTick>
 8000df2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000df4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000df8:	079b      	lsls	r3, r3, #30
 8000dfa:	f57f af3c 	bpl.w	8000c76 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fbef 	bl	80005e0 <HAL_GetTick>
 8000e02:	1bc0      	subs	r0, r0, r7
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d9f5      	bls.n	8000df4 <HAL_RCC_OscConfig+0x298>
 8000e08:	e749      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	0800381e 	.word	0x0800381e
 8000e14:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e1a:	00d8      	lsls	r0, r3, #3
 8000e1c:	d429      	bmi.n	8000e72 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e30:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e34:	4f71      	ldr	r7, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x4a0>)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	05d9      	lsls	r1, r3, #23
 8000e3a:	d51d      	bpl.n	8000e78 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3c:	68ab      	ldr	r3, [r5, #8]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d12b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x33e>
 8000e42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fbc7 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e56:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e58:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e5c:	079b      	lsls	r3, r3, #30
 8000e5e:	d542      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8000e60:	f1b8 0f00 	cmp.w	r8, #0
 8000e64:	f43f af0b 	beq.w	8000c7e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e70:	e705      	b.n	8000c7e <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8000e72:	f04f 0800 	mov.w	r8, #0
 8000e76:	e7dd      	b.n	8000e34 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e80:	f7ff fbae 	bl	80005e0 <HAL_GetTick>
 8000e84:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	05da      	lsls	r2, r3, #23
 8000e8a:	d4d7      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff fba8 	bl	80005e0 <HAL_GetTick>
 8000e90:	eba0 0009 	sub.w	r0, r0, r9
 8000e94:	2802      	cmp	r0, #2
 8000e96:	d9f6      	bls.n	8000e86 <HAL_RCC_OscConfig+0x32a>
 8000e98:	e701      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d106      	bne.n	8000eac <HAL_RCC_OscConfig+0x350>
 8000e9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000eaa:	e7ca      	b.n	8000e42 <HAL_RCC_OscConfig+0x2e6>
 8000eac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000eb8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000ebc:	f022 0204 	bic.w	r2, r2, #4
 8000ec0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1c2      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fb8a 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ed0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ed2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ed6:	0798      	lsls	r0, r3, #30
 8000ed8:	d5c2      	bpl.n	8000e60 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fb81 	bl	80005e0 <HAL_GetTick>
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d9f6      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x376>
 8000ee4:	e6db      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fb7b 	bl	80005e0 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	4548      	cmp	r0, r9
 8000eee:	d9b3      	bls.n	8000e58 <HAL_RCC_OscConfig+0x2fc>
 8000ef0:	e6d5      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ef2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ef4:	b19b      	cbz	r3, 8000f1e <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8000ef6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb6d 	bl	80005e0 <HAL_GetTick>
 8000f06:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f0c:	079a      	lsls	r2, r3, #30
 8000f0e:	f53f aeba 	bmi.w	8000c86 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f12:	f7ff fb65 	bl	80005e0 <HAL_GetTick>
 8000f16:	1bc0      	subs	r0, r0, r7
 8000f18:	2802      	cmp	r0, #2
 8000f1a:	d9f5      	bls.n	8000f08 <HAL_RCC_OscConfig+0x3ac>
 8000f1c:	e6bf      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8000f1e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb59 	bl	80005e0 <HAL_GetTick>
 8000f2e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f30:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	f57f aea6 	bpl.w	8000c86 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f3a:	f7ff fb51 	bl	80005e0 <HAL_GetTick>
 8000f3e:	1bc0      	subs	r0, r0, r7
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f5      	bls.n	8000f30 <HAL_RCC_OscConfig+0x3d4>
 8000f44:	e6ab      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f46:	2e0c      	cmp	r6, #12
 8000f48:	f43f ae0c 	beq.w	8000b64 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f4c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f54:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f56:	d136      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb42 	bl	80005e0 <HAL_GetTick>
 8000f5c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	0198      	lsls	r0, r3, #6
 8000f62:	d42a      	bmi.n	8000fba <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f64:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f66:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f68:	06db      	lsls	r3, r3, #27
 8000f6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f6e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f74:	3a01      	subs	r2, #1
 8000f76:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000f7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000f7c:	0852      	lsrs	r2, r2, #1
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000f84:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000f86:	0852      	lsrs	r2, r2, #1
 8000f88:	3a01      	subs	r2, #1
 8000f8a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000f8e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f96:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f98:	68e3      	ldr	r3, [r4, #12]
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fb1e 	bl	80005e0 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0199      	lsls	r1, r3, #6
 8000faa:	f53f ae70 	bmi.w	8000c8e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fb17 	bl	80005e0 <HAL_GetTick>
 8000fb2:	1b40      	subs	r0, r0, r5
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x44a>
 8000fb8:	e671      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fba:	f7ff fb11 	bl	80005e0 <HAL_GetTick>
 8000fbe:	1b80      	subs	r0, r0, r6
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	d9cc      	bls.n	8000f5e <HAL_RCC_OscConfig+0x402>
 8000fc4:	e66b      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000fca:	bf5e      	ittt	pl
 8000fcc:	68e3      	ldrpl	r3, [r4, #12]
 8000fce:	f023 0303 	bicpl.w	r3, r3, #3
 8000fd2:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000fd4:	68e3      	ldr	r3, [r4, #12]
 8000fd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fafe 	bl	80005e0 <HAL_GetTick>
 8000fe4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	f57f ae50 	bpl.w	8000c8e <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff faf7 	bl	80005e0 <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f6      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x48a>
 8000ff8:	e651      	b.n	8000c9e <HAL_RCC_OscConfig+0x142>
 8000ffa:	bf00      	nop
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_RCC_ClockConfig>:
{
 8001000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001004:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001006:	4604      	mov	r4, r0
 8001008:	b910      	cbnz	r0, 8001010 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
 800100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4a40      	ldr	r2, [pc, #256]	; (8001114 <HAL_RCC_ClockConfig+0x114>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	428b      	cmp	r3, r1
 800101a:	d329      	bcc.n	8001070 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	07d9      	lsls	r1, r3, #31
 8001020:	d431      	bmi.n	8001086 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001022:	6821      	ldr	r1, [r4, #0]
 8001024:	078a      	lsls	r2, r1, #30
 8001026:	d45b      	bmi.n	80010e0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001028:	4a3a      	ldr	r2, [pc, #232]	; (8001114 <HAL_RCC_ClockConfig+0x114>)
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	429e      	cmp	r6, r3
 8001032:	d35d      	bcc.n	80010f0 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	f011 0f04 	tst.w	r1, #4
 8001038:	4d37      	ldr	r5, [pc, #220]	; (8001118 <HAL_RCC_ClockConfig+0x118>)
 800103a:	d164      	bne.n	8001106 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103c:	070b      	lsls	r3, r1, #28
 800103e:	d506      	bpl.n	800104e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001040:	68ab      	ldr	r3, [r5, #8]
 8001042:	6922      	ldr	r2, [r4, #16]
 8001044:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001048:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800104c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800104e:	f7ff fd31 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8001052:	68ab      	ldr	r3, [r5, #8]
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_RCC_ClockConfig+0x11c>)
 8001056:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800105a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	40d8      	lsrs	r0, r3
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_RCC_ClockConfig+0x120>)
 8001068:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ba88 	b.w	8000580 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	430b      	orrs	r3, r1
 8001078:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	4299      	cmp	r1, r3
 8001082:	d1c2      	bne.n	800100a <HAL_RCC_ClockConfig+0xa>
 8001084:	e7ca      	b.n	800101c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	4d23      	ldr	r5, [pc, #140]	; (8001118 <HAL_RCC_ClockConfig+0x118>)
 800108a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800108c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800108e:	d11b      	bne.n	80010c8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001090:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001094:	d0b9      	beq.n	800100a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001096:	68ab      	ldr	r3, [r5, #8]
 8001098:	f023 0303 	bic.w	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa9e 	bl	80005e0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010a8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	68ab      	ldr	r3, [r5, #8]
 80010ac:	6862      	ldr	r2, [r4, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010b6:	d0b4      	beq.n	8001022 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fa92 	bl	80005e0 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	4540      	cmp	r0, r8
 80010c0:	d9f3      	bls.n	80010aa <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
}
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c8:	2a02      	cmp	r2, #2
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010d0:	e7e0      	b.n	8001094 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010d2:	b912      	cbnz	r2, 80010da <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d4:	f013 0f02 	tst.w	r3, #2
 80010d8:	e7dc      	b.n	8001094 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010de:	e7d9      	b.n	8001094 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_RCC_ClockConfig+0x118>)
 80010e2:	68a0      	ldr	r0, [r4, #8]
 80010e4:	6893      	ldr	r3, [r2, #8]
 80010e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010ea:	4303      	orrs	r3, r0
 80010ec:	6093      	str	r3, [r2, #8]
 80010ee:	e79b      	b.n	8001028 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f0:	6813      	ldr	r3, [r2, #0]
 80010f2:	f023 0307 	bic.w	r3, r3, #7
 80010f6:	4333      	orrs	r3, r6
 80010f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	429e      	cmp	r6, r3
 8001102:	d182      	bne.n	800100a <HAL_RCC_ClockConfig+0xa>
 8001104:	e796      	b.n	8001034 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001106:	68ab      	ldr	r3, [r5, #8]
 8001108:	68e2      	ldr	r2, [r4, #12]
 800110a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800110e:	4313      	orrs	r3, r2
 8001110:	60ab      	str	r3, [r5, #8]
 8001112:	e793      	b.n	800103c <HAL_RCC_ClockConfig+0x3c>
 8001114:	40022000 	.word	0x40022000
 8001118:	40021000 	.word	0x40021000
 800111c:	0800381e 	.word	0x0800381e
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	f003 031f 	and.w	r3, r3, #31
}
 8001138:	40d8      	lsrs	r0, r3
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	0800382e 	.word	0x0800382e
 8001144:	20000000 	.word	0x20000000

08001148 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_RCC_GetPCLK2Freq+0x18>)
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001156:	6810      	ldr	r0, [r2, #0]
 8001158:	f003 031f 	and.w	r3, r3, #31
}
 800115c:	40d8      	lsrs	r0, r3
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000
 8001164:	0800382e 	.word	0x0800382e
 8001168:	20000000 	.word	0x20000000

0800116c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <RCCEx_PLLSAI1_Config+0x114>)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	f012 0f03 	tst.w	r2, #3
{
 8001176:	4605      	mov	r5, r0
 8001178:	460e      	mov	r6, r1
 800117a:	461c      	mov	r4, r3
 800117c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800117e:	d039      	beq.n	80011f4 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	4282      	cmp	r2, r0
 8001188:	d14b      	bne.n	8001222 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800118a:	2a00      	cmp	r2, #0
 800118c:	d049      	beq.n	8001222 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800118e:	68db      	ldr	r3, [r3, #12]
       ||
 8001190:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001192:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001196:	3301      	adds	r3, #1
       ||
 8001198:	4293      	cmp	r3, r2
 800119a:	d142      	bne.n	8001222 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011a2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011a4:	f7ff fa1c 	bl	80005e0 <HAL_GetTick>
 80011a8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	011a      	lsls	r2, r3, #4
 80011ae:	d441      	bmi.n	8001234 <RCCEx_PLLSAI1_Config+0xc8>
 80011b0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d045      	beq.n	8001242 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80011b6:	2e01      	cmp	r6, #1
 80011b8:	d14f      	bne.n	800125a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80011ba:	6922      	ldr	r2, [r4, #16]
 80011bc:	6928      	ldr	r0, [r5, #16]
 80011be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80011c2:	0840      	lsrs	r0, r0, #1
 80011c4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80011c8:	3801      	subs	r0, #1
 80011ca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80011ce:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80011d2:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011da:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fa00 	bl	80005e0 <HAL_GetTick>
 80011e0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	d545      	bpl.n	8001274 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80011e8:	6923      	ldr	r3, [r4, #16]
 80011ea:	69aa      	ldr	r2, [r5, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	6123      	str	r3, [r4, #16]
 80011f0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80011f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80011f4:	2802      	cmp	r0, #2
 80011f6:	d010      	beq.n	800121a <RCCEx_PLLSAI1_Config+0xae>
 80011f8:	2803      	cmp	r0, #3
 80011fa:	d014      	beq.n	8001226 <RCCEx_PLLSAI1_Config+0xba>
 80011fc:	2801      	cmp	r0, #1
 80011fe:	d110      	bne.n	8001222 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	079f      	lsls	r7, r3, #30
 8001204:	d5f5      	bpl.n	80011f2 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001206:	68e3      	ldr	r3, [r4, #12]
 8001208:	686a      	ldr	r2, [r5, #4]
 800120a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800120e:	3a01      	subs	r2, #1
 8001210:	4318      	orrs	r0, r3
 8001212:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001216:	60e0      	str	r0, [r4, #12]
 8001218:	e7c0      	b.n	800119c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001220:	d1f1      	bne.n	8001206 <RCCEx_PLLSAI1_Config+0x9a>
 8001222:	2001      	movs	r0, #1
 8001224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	0391      	lsls	r1, r2, #14
 800122a:	d4ec      	bmi.n	8001206 <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001232:	e7f5      	b.n	8001220 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001234:	f7ff f9d4 	bl	80005e0 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	2802      	cmp	r0, #2
 800123c:	d9b5      	bls.n	80011aa <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800123e:	2003      	movs	r0, #3
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001242:	6922      	ldr	r2, [r4, #16]
 8001244:	68e9      	ldr	r1, [r5, #12]
 8001246:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800124a:	06c9      	lsls	r1, r1, #27
 800124c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001250:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001254:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001256:	6123      	str	r3, [r4, #16]
 8001258:	e7bc      	b.n	80011d4 <RCCEx_PLLSAI1_Config+0x68>
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	6968      	ldr	r0, [r5, #20]
 800125e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001262:	0840      	lsrs	r0, r0, #1
 8001264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001268:	3801      	subs	r0, #1
 800126a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800126e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001272:	e7f0      	b.n	8001256 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001274:	f7ff f9b4 	bl	80005e0 <HAL_GetTick>
 8001278:	1b80      	subs	r0, r0, r6
 800127a:	2802      	cmp	r0, #2
 800127c:	d9b1      	bls.n	80011e2 <RCCEx_PLLSAI1_Config+0x76>
 800127e:	e7de      	b.n	800123e <RCCEx_PLLSAI1_Config+0xd2>
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001288:	6805      	ldr	r5, [r0, #0]
 800128a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800128e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001290:	d00e      	beq.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001292:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001294:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001298:	d053      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800129a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800129e:	d055      	beq.n	800134c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d15e      	bne.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012a4:	3004      	adds	r0, #4
 80012a6:	f7ff ff61 	bl	800116c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80012aa:	4605      	mov	r5, r0
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d04d      	beq.n	800134c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	039e      	lsls	r6, r3, #14
 80012b4:	d563      	bpl.n	800137e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012b6:	4e93      	ldr	r6, [pc, #588]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80012b8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80012ba:	00d8      	lsls	r0, r3, #3
 80012bc:	f140 8116 	bpl.w	80014ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c2:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8001508 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80012c6:	f8d8 3000 	ldr.w	r3, [r8]
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80012d2:	f7ff f985 	bl	80005e0 <HAL_GetTick>
 80012d6:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80012d8:	f8d8 3000 	ldr.w	r3, [r8]
 80012dc:	05d9      	lsls	r1, r3, #23
 80012de:	d542      	bpl.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d147      	bne.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80012e4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80012e8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012ec:	d014      	beq.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80012ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d011      	beq.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80012f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80012f8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80012fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001300:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001304:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800130c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001310:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001314:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001318:	07da      	lsls	r2, r3, #31
 800131a:	d509      	bpl.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 800131c:	f7ff f960 	bl	80005e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001324:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001326:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800132a:	079b      	lsls	r3, r3, #30
 800132c:	f140 80c0 	bpl.w	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001330:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001334:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800133a:	4313      	orrs	r3, r2
 800133c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001340:	e018      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001342:	4a70      	ldr	r2, [pc, #448]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001344:	68d3      	ldr	r3, [r2, #12]
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800134c:	4a6d      	ldr	r2, [pc, #436]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800134e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001350:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001354:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001358:	430b      	orrs	r3, r1
 800135a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800135e:	2500      	movs	r5, #0
 8001360:	e7a6      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001362:	2501      	movs	r5, #1
 8001364:	e7a4      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff f93b 	bl	80005e0 <HAL_GetTick>
 800136a:	eba0 0009 	sub.w	r0, r0, r9
 800136e:	2802      	cmp	r0, #2
 8001370:	d9b2      	bls.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001372:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001374:	b11f      	cbz	r7, 800137e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001376:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	07df      	lsls	r7, r3, #31
 8001382:	d508      	bpl.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001384:	495f      	ldr	r1, [pc, #380]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001386:	6a20      	ldr	r0, [r4, #32]
 8001388:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800138c:	f022 0203 	bic.w	r2, r2, #3
 8001390:	4302      	orrs	r2, r0
 8001392:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001396:	079e      	lsls	r6, r3, #30
 8001398:	d508      	bpl.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800139a:	495a      	ldr	r1, [pc, #360]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800139c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800139e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013a2:	f022 020c 	bic.w	r2, r2, #12
 80013a6:	4302      	orrs	r2, r0
 80013a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80013ac:	0698      	lsls	r0, r3, #26
 80013ae:	d508      	bpl.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80013b0:	4954      	ldr	r1, [pc, #336]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80013b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013bc:	4302      	orrs	r2, r0
 80013be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80013c2:	0599      	lsls	r1, r3, #22
 80013c4:	d508      	bpl.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80013c6:	494f      	ldr	r1, [pc, #316]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80013c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013ce:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80013d2:	4302      	orrs	r2, r0
 80013d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80013d8:	055a      	lsls	r2, r3, #21
 80013da:	d508      	bpl.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80013dc:	4949      	ldr	r1, [pc, #292]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80013de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80013e8:	4302      	orrs	r2, r0
 80013ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013ee:	065f      	lsls	r7, r3, #25
 80013f0:	d508      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013f2:	4944      	ldr	r1, [pc, #272]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80013f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80013f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013fe:	4302      	orrs	r2, r0
 8001400:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001404:	05de      	lsls	r6, r3, #23
 8001406:	d508      	bpl.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001408:	493e      	ldr	r1, [pc, #248]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800140a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800140c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001410:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001414:	4302      	orrs	r2, r0
 8001416:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800141a:	0498      	lsls	r0, r3, #18
 800141c:	d50f      	bpl.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800141e:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001420:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001422:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001426:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800142a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800142c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001434:	d144      	bne.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001436:	68d3      	ldr	r3, [r2, #12]
 8001438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800143c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	0359      	lsls	r1, r3, #13
 8001442:	d50f      	bpl.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001446:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001448:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800144c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001450:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001452:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800145a:	d13c      	bne.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800145c:	68d3      	ldr	r3, [r2, #12]
 800145e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001462:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	045a      	lsls	r2, r3, #17
 8001468:	d512      	bpl.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800146a:	4926      	ldr	r1, [pc, #152]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800146c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800146e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001472:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001476:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001478:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800147c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001480:	d106      	bne.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001482:	2102      	movs	r1, #2
 8001484:	1d20      	adds	r0, r4, #4
 8001486:	f7ff fe71 	bl	800116c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800148a:	2800      	cmp	r0, #0
 800148c:	bf18      	it	ne
 800148e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	d508      	bpl.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001498:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800149a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800149e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014a2:	430b      	orrs	r3, r1
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80014a8:	4628      	mov	r0, r5
 80014aa:	b003      	add	sp, #12
 80014ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff f896 	bl	80005e0 <HAL_GetTick>
 80014b4:	eba0 0008 	sub.w	r0, r0, r8
 80014b8:	4548      	cmp	r0, r9
 80014ba:	f67f af34 	bls.w	8001326 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80014be:	e758      	b.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014c0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014c4:	d1bb      	bne.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014c6:	2101      	movs	r1, #1
 80014c8:	1d20      	adds	r0, r4, #4
 80014ca:	f7ff fe4f 	bl	800116c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80014ce:	2800      	cmp	r0, #0
 80014d0:	bf18      	it	ne
 80014d2:	4605      	movne	r5, r0
 80014d4:	e7b3      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80014d6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014da:	d1c3      	bne.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014dc:	2101      	movs	r1, #1
 80014de:	1d20      	adds	r0, r4, #4
 80014e0:	f7ff fe44 	bl	800116c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	bf18      	it	ne
 80014e8:	4605      	movne	r5, r0
 80014ea:	e7bb      	b.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	65b3      	str	r3, [r6, #88]	; 0x58
 80014f4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014fe:	2701      	movs	r7, #1
 8001500:	e6df      	b.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000

0800151c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800151c:	6a03      	ldr	r3, [r0, #32]
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001524:	6a03      	ldr	r3, [r0, #32]
{
 8001526:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001528:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800152a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800152c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800152e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001532:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001536:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001538:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800153a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800153e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001540:	4c12      	ldr	r4, [pc, #72]	; (800158c <TIM_OC1_SetConfig+0x70>)
 8001542:	42a0      	cmp	r0, r4
 8001544:	d006      	beq.n	8001554 <TIM_OC1_SetConfig+0x38>
 8001546:	4e12      	ldr	r6, [pc, #72]	; (8001590 <TIM_OC1_SetConfig+0x74>)
 8001548:	42b0      	cmp	r0, r6
 800154a:	d003      	beq.n	8001554 <TIM_OC1_SetConfig+0x38>
 800154c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001550:	42b0      	cmp	r0, r6
 8001552:	d114      	bne.n	800157e <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001554:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001556:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800155a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800155c:	42a0      	cmp	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800155e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001562:	d006      	beq.n	8001572 <TIM_OC1_SetConfig+0x56>
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <TIM_OC1_SetConfig+0x74>)
 8001566:	42a0      	cmp	r0, r4
 8001568:	d003      	beq.n	8001572 <TIM_OC1_SetConfig+0x56>
 800156a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800156e:	42a0      	cmp	r0, r4
 8001570:	d105      	bne.n	800157e <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001572:	694c      	ldr	r4, [r1, #20]
 8001574:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001576:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800157a:	4334      	orrs	r4, r6
 800157c:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800157e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001580:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001582:	684a      	ldr	r2, [r1, #4]
 8001584:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001586:	6203      	str	r3, [r0, #32]
 8001588:	bd70      	pop	{r4, r5, r6, pc}
 800158a:	bf00      	nop
 800158c:	40012c00 	.word	0x40012c00
 8001590:	40014000 	.word	0x40014000

08001594 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001594:	6a03      	ldr	r3, [r0, #32]
 8001596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800159a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800159c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800159e:	6842      	ldr	r2, [r0, #4]
{
 80015a0:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015a2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80015a6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80015aa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80015ae:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80015b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80015b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80015b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80015ba:	4d0f      	ldr	r5, [pc, #60]	; (80015f8 <TIM_OC3_SetConfig+0x64>)
 80015bc:	42a8      	cmp	r0, r5
 80015be:	d10e      	bne.n	80015de <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80015c0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80015c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80015c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80015ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80015ce:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015d0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015d6:	4335      	orrs	r5, r6
 80015d8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80015dc:	e005      	b.n	80015ea <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015de:	4d07      	ldr	r5, [pc, #28]	; (80015fc <TIM_OC3_SetConfig+0x68>)
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d0f4      	beq.n	80015ce <TIM_OC3_SetConfig+0x3a>
 80015e4:	4d06      	ldr	r5, [pc, #24]	; (8001600 <TIM_OC3_SetConfig+0x6c>)
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	d0f1      	beq.n	80015ce <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015ea:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80015ec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80015ee:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80015f0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015f2:	6203      	str	r3, [r0, #32]
}
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
 80015f6:	bf00      	nop
 80015f8:	40012c00 	.word	0x40012c00
 80015fc:	40014000 	.word	0x40014000
 8001600:	40014400 	.word	0x40014400

08001604 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001604:	6a03      	ldr	r3, [r0, #32]
 8001606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800160a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800160c:	6a02      	ldr	r2, [r0, #32]
{
 800160e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001610:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001612:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001614:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800161e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001622:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001628:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800162c:	4d0a      	ldr	r5, [pc, #40]	; (8001658 <TIM_OC4_SetConfig+0x54>)
 800162e:	42a8      	cmp	r0, r5
 8001630:	d007      	beq.n	8001642 <TIM_OC4_SetConfig+0x3e>
 8001632:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001636:	42a8      	cmp	r0, r5
 8001638:	d003      	beq.n	8001642 <TIM_OC4_SetConfig+0x3e>
 800163a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800163e:	42a8      	cmp	r0, r5
 8001640:	d104      	bne.n	800164c <TIM_OC4_SetConfig+0x48>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001642:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001644:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001648:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800164c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800164e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001650:	684b      	ldr	r3, [r1, #4]
 8001652:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001654:	6202      	str	r2, [r0, #32]
 8001656:	bd30      	pop	{r4, r5, pc}
 8001658:	40012c00 	.word	0x40012c00

0800165c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800165c:	6a03      	ldr	r3, [r0, #32]
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001664:	6a02      	ldr	r2, [r0, #32]
{
 8001666:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001668:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800166a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800166c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001676:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001678:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800167a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800167e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001682:	4d0b      	ldr	r5, [pc, #44]	; (80016b0 <TIM_OC5_SetConfig+0x54>)
 8001684:	42a8      	cmp	r0, r5
 8001686:	d007      	beq.n	8001698 <TIM_OC5_SetConfig+0x3c>
 8001688:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800168c:	42a8      	cmp	r0, r5
 800168e:	d003      	beq.n	8001698 <TIM_OC5_SetConfig+0x3c>
 8001690:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001694:	42a8      	cmp	r0, r5
 8001696:	d104      	bne.n	80016a2 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001698:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800169a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800169e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80016a4:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80016a6:	684b      	ldr	r3, [r1, #4]
 80016a8:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016aa:	6202      	str	r2, [r0, #32]
 80016ac:	bd30      	pop	{r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	40012c00 	.word	0x40012c00

080016b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80016b4:	6a03      	ldr	r3, [r0, #32]
 80016b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016bc:	6a02      	ldr	r2, [r0, #32]
{
 80016be:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016c2:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80016d2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80016d4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80016d8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016dc:	4d0a      	ldr	r5, [pc, #40]	; (8001708 <TIM_OC6_SetConfig+0x54>)
 80016de:	42a8      	cmp	r0, r5
 80016e0:	d007      	beq.n	80016f2 <TIM_OC6_SetConfig+0x3e>
 80016e2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80016e6:	42a8      	cmp	r0, r5
 80016e8:	d003      	beq.n	80016f2 <TIM_OC6_SetConfig+0x3e>
 80016ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ee:	42a8      	cmp	r0, r5
 80016f0:	d104      	bne.n	80016fc <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80016f2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80016f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80016f8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80016fe:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001700:	684b      	ldr	r3, [r1, #4]
 8001702:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001704:	6202      	str	r2, [r0, #32]
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	40012c00 	.word	0x40012c00

0800170c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800170c:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800170e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001710:	4290      	cmp	r0, r2
{
 8001712:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001714:	d002      	beq.n	800171c <TIM_Base_SetConfig+0x10>
 8001716:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800171a:	d109      	bne.n	8001730 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800171c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800171e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001722:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001724:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001728:	d009      	beq.n	800173e <TIM_Base_SetConfig+0x32>
 800172a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800172e:	d006      	beq.n	800173e <TIM_Base_SetConfig+0x32>
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <TIM_Base_SetConfig+0x70>)
 8001732:	4290      	cmp	r0, r2
 8001734:	d003      	beq.n	800173e <TIM_Base_SetConfig+0x32>
 8001736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173a:	4290      	cmp	r0, r2
 800173c:	d103      	bne.n	8001746 <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001744:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001746:	694a      	ldr	r2, [r1, #20]
 8001748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800174c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800174e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001750:	688b      	ldr	r3, [r1, #8]
 8001752:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001754:	680b      	ldr	r3, [r1, #0]
 8001756:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <TIM_Base_SetConfig+0x6c>)
 800175a:	4298      	cmp	r0, r3
 800175c:	d007      	beq.n	800176e <TIM_Base_SetConfig+0x62>
 800175e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001762:	4298      	cmp	r0, r3
 8001764:	d003      	beq.n	800176e <TIM_Base_SetConfig+0x62>
 8001766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800176a:	4298      	cmp	r0, r3
 800176c:	d101      	bne.n	8001772 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800176e:	690b      	ldr	r3, [r1, #16]
 8001770:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001772:	2301      	movs	r3, #1
 8001774:	6143      	str	r3, [r0, #20]
 8001776:	bd10      	pop	{r4, pc}
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40014000 	.word	0x40014000

08001780 <HAL_TIM_PWM_Init>:
{
 8001780:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001782:	4604      	mov	r4, r0
 8001784:	b1a0      	cbz	r0, 80017b0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001786:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800178a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800178e:	b91b      	cbnz	r3, 8001798 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001790:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001794:	f000 fefa 	bl	800258c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	2302      	movs	r3, #2
 800179a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	1d21      	adds	r1, r4, #4
 80017a2:	f7ff ffb3 	bl	800170c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017ac:	2000      	movs	r0, #0
 80017ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
}
 80017b2:	bd10      	pop	{r4, pc}

080017b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b4:	6a03      	ldr	r3, [r0, #32]
 80017b6:	f023 0310 	bic.w	r3, r3, #16
 80017ba:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80017bc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80017be:	6842      	ldr	r2, [r0, #4]
{
 80017c0:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80017c2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017c6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80017ca:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017d2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80017d4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80017d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80017dc:	4d0e      	ldr	r5, [pc, #56]	; (8001818 <TIM_OC2_SetConfig+0x64>)
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d10e      	bne.n	8001800 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017e2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80017e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80017e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80017ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80017f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017f2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017f8:	4335      	orrs	r5, r6
 80017fa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80017fe:	e005      	b.n	800180c <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001800:	4d06      	ldr	r5, [pc, #24]	; (800181c <TIM_OC2_SetConfig+0x68>)
 8001802:	42a8      	cmp	r0, r5
 8001804:	d0f4      	beq.n	80017f0 <TIM_OC2_SetConfig+0x3c>
 8001806:	4d06      	ldr	r5, [pc, #24]	; (8001820 <TIM_OC2_SetConfig+0x6c>)
 8001808:	42a8      	cmp	r0, r5
 800180a:	d0f1      	beq.n	80017f0 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 800180c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800180e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001810:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001812:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001814:	6203      	str	r3, [r0, #32]
}
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40014000 	.word	0x40014000
 8001820:	40014400 	.word	0x40014400

08001824 <HAL_TIM_PWM_ConfigChannel>:
{
 8001824:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001826:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800182a:	2b01      	cmp	r3, #1
{
 800182c:	4604      	mov	r4, r0
 800182e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001832:	d010      	beq.n	8001856 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001834:	2301      	movs	r3, #1
  switch (Channel)
 8001836:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001838:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800183c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001840:	d043      	beq.n	80018ca <HAL_TIM_PWM_ConfigChannel+0xa6>
 8001842:	d809      	bhi.n	8001858 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001844:	b1fa      	cbz	r2, 8001886 <HAL_TIM_PWM_ConfigChannel+0x62>
 8001846:	2a04      	cmp	r2, #4
 8001848:	d02e      	beq.n	80018a8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800184a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800184c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800184e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001852:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001856:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001858:	2a10      	cmp	r2, #16
 800185a:	d047      	beq.n	80018ec <HAL_TIM_PWM_ConfigChannel+0xc8>
 800185c:	2a14      	cmp	r2, #20
 800185e:	d056      	beq.n	800190e <HAL_TIM_PWM_ConfigChannel+0xea>
 8001860:	2a0c      	cmp	r2, #12
 8001862:	d1f2      	bne.n	800184a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001864:	6820      	ldr	r0, [r4, #0]
 8001866:	f7ff fecd 	bl	8001604 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800186a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800186c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001884:	e030      	b.n	80018e8 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f7ff fe48 	bl	800151c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800188c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800188e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	f042 0208 	orr.w	r2, r2, #8
 8001896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	f022 0204 	bic.w	r2, r2, #4
 800189e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018a4:	619a      	str	r2, [r3, #24]
      break;
 80018a6:	e7d0      	b.n	800184a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018a8:	6820      	ldr	r0, [r4, #0]
 80018aa:	f7ff ff83 	bl	80017b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018c8:	e7ec      	b.n	80018a4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	f7ff fe62 	bl	8001594 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	f042 0208 	orr.w	r2, r2, #8
 80018da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	f022 0204 	bic.w	r2, r2, #4
 80018e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018e8:	61da      	str	r2, [r3, #28]
      break;
 80018ea:	e7ae      	b.n	800184a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80018ec:	6820      	ldr	r0, [r4, #0]
 80018ee:	f7ff feb5 	bl	800165c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80018f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80018f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80018f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018f8:	f042 0208 	orr.w	r2, r2, #8
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80018fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001900:	f022 0204 	bic.w	r2, r2, #4
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001906:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001908:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800190c:	e79d      	b.n	800184a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	f7ff fed0 	bl	80016b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001914:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001916:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800192a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800192e:	e7ec      	b.n	800190a <HAL_TIM_PWM_ConfigChannel+0xe6>

08001930 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001930:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001932:	f001 011f 	and.w	r1, r1, #31
{
 8001936:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001938:	2401      	movs	r4, #1
 800193a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800193c:	ea23 0304 	bic.w	r3, r3, r4
 8001940:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001942:	6a03      	ldr	r3, [r0, #32]
 8001944:	408a      	lsls	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	6202      	str	r2, [r0, #32]
 800194a:	bd10      	pop	{r4, pc}

0800194c <HAL_TIM_PWM_Start>:
{
 800194c:	b510      	push	{r4, lr}
 800194e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001950:	2201      	movs	r2, #1
 8001952:	6800      	ldr	r0, [r0, #0]
 8001954:	f7ff ffec 	bl	8001930 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_TIM_PWM_Start+0x50>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d017      	beq.n	8001990 <HAL_TIM_PWM_Start+0x44>
 8001960:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_TIM_PWM_Start+0x44>
 8001968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196c:	4293      	cmp	r3, r2
 800196e:	d00f      	beq.n	8001990 <HAL_TIM_PWM_Start+0x44>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_TIM_PWM_Start+0x54>)
 8001974:	4001      	ands	r1, r0
 8001976:	2906      	cmp	r1, #6
 8001978:	d008      	beq.n	800198c <HAL_TIM_PWM_Start+0x40>
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4002      	ands	r2, r0
 800197e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001982:	d003      	beq.n	800198c <HAL_TIM_PWM_Start+0x40>
    __HAL_TIM_ENABLE(htim);
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	2000      	movs	r0, #0
 800198e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8001990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
 8001998:	e7ea      	b.n	8001970 <HAL_TIM_PWM_Start+0x24>
 800199a:	bf00      	nop
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	00010007 	.word	0x00010007

080019a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019a8:	2b01      	cmp	r3, #1
{
 80019aa:	b530      	push	{r4, r5, lr}
 80019ac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80019b0:	d01b      	beq.n	80019ea <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019b2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80019b4:	4d0e      	ldr	r5, [pc, #56]	; (80019f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80019b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80019ba:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80019bc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80019be:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80019c0:	bf02      	ittt	eq
 80019c2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80019c4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80019c8:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019ca:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019cc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80019ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019d2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80019d4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019d8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019da:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019dc:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80019de:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80019e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019e4:	2300      	movs	r3, #0
 80019e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80019ea:	4618      	mov	r0, r3

  return HAL_OK;
}
 80019ec:	bd30      	pop	{r4, r5, pc}
 80019ee:	bf00      	nop
 80019f0:	40012c00 	.word	0x40012c00

080019f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80019f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019f8:	2b01      	cmp	r3, #1
{
 80019fa:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80019fc:	d034      	beq.n	8001a68 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80019fe:	68cb      	ldr	r3, [r1, #12]
 8001a00:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001a02:	4c1a      	ldr	r4, [pc, #104]	; (8001a6c <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a0a:	684a      	ldr	r2, [r1, #4]
 8001a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a12:	680a      	ldr	r2, [r1, #0]
 8001a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a1a:	690a      	ldr	r2, [r1, #16]
 8001a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a22:	694a      	ldr	r2, [r1, #20]
 8001a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8001a32:	698a      	ldr	r2, [r1, #24]
 8001a34:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001a3c:	6802      	ldr	r2, [r0, #0]
 8001a3e:	42a2      	cmp	r2, r4
 8001a40:	d10c      	bne.n	8001a5c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8001a42:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001a44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a48:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001a4c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001a4e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a54:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001a56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8001a68:	2002      	movs	r0, #2
}
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a70:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a72:	69c1      	ldr	r1, [r0, #28]
{
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a78:	6883      	ldr	r3, [r0, #8]
 8001a7a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a7c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	6960      	ldr	r0, [r4, #20]
 8001a82:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a84:	4882      	ldr	r0, [pc, #520]	; (8001c90 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a86:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a88:	4028      	ands	r0, r5
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a8e:	6853      	ldr	r3, [r2, #4]
 8001a90:	68e0      	ldr	r0, [r4, #12]
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a96:	4303      	orrs	r3, r0
 8001a98:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a9a:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a9c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a9e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001aa0:	bf1c      	itt	ne
 8001aa2:	6a23      	ldrne	r3, [r4, #32]
 8001aa4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001aa6:	6893      	ldr	r3, [r2, #8]
 8001aa8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001aac:	4303      	orrs	r3, r0
 8001aae:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ab0:	4b79      	ldr	r3, [pc, #484]	; (8001c98 <UART_SetConfig+0x228>)
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d114      	bne.n	8001ae0 <UART_SetConfig+0x70>
 8001ab6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001aba:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <UART_SetConfig+0x22c>)
 8001abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ac4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ac8:	5cd3      	ldrb	r3, [r2, r3]
 8001aca:	f040 80aa 	bne.w	8001c22 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d820      	bhi.n	8001b14 <UART_SetConfig+0xa4>
 8001ad2:	e8df f003 	tbb	[pc, r3]
 8001ad6:	8f77      	.short	0x8f77
 8001ad8:	1f9b1f92 	.word	0x1f9b1f92
 8001adc:	1f1f      	.short	0x1f1f
 8001ade:	9e          	.byte	0x9e
 8001adf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ae0:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <UART_SetConfig+0x230>)
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d107      	bne.n	8001af6 <UART_SetConfig+0x86>
 8001ae6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001aea:	4a6e      	ldr	r2, [pc, #440]	; (8001ca4 <UART_SetConfig+0x234>)
 8001aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	e7e6      	b.n	8001ac4 <UART_SetConfig+0x54>
 8001af6:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <UART_SetConfig+0x224>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 80c2 	bne.w	8001c82 <UART_SetConfig+0x212>
 8001afe:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001b02:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001b06:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001b0a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001b0e:	d02a      	beq.n	8001b66 <UART_SetConfig+0xf6>
 8001b10:	d806      	bhi.n	8001b20 <UART_SetConfig+0xb0>
 8001b12:	b315      	cbz	r5, 8001b5a <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001b14:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001b1a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b20:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001b24:	d006      	beq.n	8001b34 <UART_SetConfig+0xc4>
 8001b26:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001b2a:	d1f3      	bne.n	8001b14 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001b2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b30:	2508      	movs	r5, #8
 8001b32:	e001      	b.n	8001b38 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001b34:	485c      	ldr	r0, [pc, #368]	; (8001ca8 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b36:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001b38:	6862      	ldr	r2, [r4, #4]
 8001b3a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001b3e:	4283      	cmp	r3, r0
 8001b40:	d8e8      	bhi.n	8001b14 <UART_SetConfig+0xa4>
 8001b42:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001b46:	d8e5      	bhi.n	8001b14 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001b48:	2d08      	cmp	r5, #8
 8001b4a:	d838      	bhi.n	8001bbe <UART_SetConfig+0x14e>
 8001b4c:	e8df f005 	tbb	[pc, r5]
 8001b50:	3726370f 	.word	0x3726370f
 8001b54:	3737372e 	.word	0x3737372e
 8001b58:	31          	.byte	0x31
 8001b59:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001b5a:	f7ff fae3 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d1ea      	bne.n	8001b38 <UART_SetConfig+0xc8>
 8001b62:	4602      	mov	r2, r0
 8001b64:	e7d7      	b.n	8001b16 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001b66:	f7fe ffa5 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
        break;
 8001b6a:	2504      	movs	r5, #4
 8001b6c:	e7f7      	b.n	8001b5e <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b6e:	f7ff fad9 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b72:	6862      	ldr	r2, [r4, #4]
 8001b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b78:	0856      	lsrs	r6, r2, #1
 8001b7a:	2700      	movs	r7, #0
 8001b7c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001b80:	2300      	movs	r3, #0
 8001b82:	4630      	mov	r0, r6
 8001b84:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001b86:	f7fe fb73 	bl	8000270 <__aeabi_uldivmod>
            break;
 8001b8a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001b8c:	4b47      	ldr	r3, [pc, #284]	; (8001cac <UART_SetConfig+0x23c>)
 8001b8e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001b92:	4299      	cmp	r1, r3
 8001b94:	d8be      	bhi.n	8001b14 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	60d8      	str	r0, [r3, #12]
 8001b9a:	e7bc      	b.n	8001b16 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001b9c:	4844      	ldr	r0, [pc, #272]	; (8001cb0 <UART_SetConfig+0x240>)
 8001b9e:	0855      	lsrs	r5, r2, #1
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ba6:	f141 0100 	adc.w	r1, r1, #0
 8001baa:	e7ec      	b.n	8001b86 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bac:	f7fe ff82 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8001bb0:	e7df      	b.n	8001b72 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001bb2:	0850      	lsrs	r0, r2, #1
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001bbc:	e7f3      	b.n	8001ba6 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8001bbe:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7e3      	b.n	8001b8c <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bc4:	f7ff faae 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bc8:	6861      	ldr	r1, [r4, #4]
 8001bca:	084a      	lsrs	r2, r1, #1
 8001bcc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bd6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bd8:	f1a3 0010 	sub.w	r0, r3, #16
 8001bdc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001be0:	4288      	cmp	r0, r1
 8001be2:	d897      	bhi.n	8001b14 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001be4:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001be8:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bea:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60c3      	str	r3, [r0, #12]
 8001bf2:	e790      	b.n	8001b16 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bf4:	f7ff faa8 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 8001bf8:	e7e6      	b.n	8001bc8 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bfa:	6860      	ldr	r0, [r4, #4]
 8001bfc:	0843      	lsrs	r3, r0, #1
 8001bfe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001c02:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c06:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c0a:	e7e3      	b.n	8001bd4 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c0c:	f7fe ff52 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8001c10:	e7da      	b.n	8001bc8 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c12:	6860      	ldr	r0, [r4, #4]
 8001c14:	0843      	lsrs	r3, r0, #1
 8001c16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c1a:	e7f4      	b.n	8001c06 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001c1c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e7da      	b.n	8001bd8 <UART_SetConfig+0x168>
    switch (clocksource)
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d830      	bhi.n	8001c88 <UART_SetConfig+0x218>
 8001c26:	e8df f003 	tbb	[pc, r3]
 8001c2a:	1805      	.short	0x1805
 8001c2c:	2f242f1b 	.word	0x2f242f1b
 8001c30:	2f2f      	.short	0x2f2f
 8001c32:	27          	.byte	0x27
 8001c33:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c34:	f7ff fa76 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c38:	6862      	ldr	r2, [r4, #4]
 8001c3a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c42:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c44:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c46:	f1a3 0010 	sub.w	r0, r3, #16
 8001c4a:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001c4e:	4288      	cmp	r0, r1
 8001c50:	f63f af60 	bhi.w	8001b14 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001c54:	6821      	ldr	r1, [r4, #0]
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e75d      	b.n	8001b16 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c5a:	f7ff fa75 	bl	8001148 <HAL_RCC_GetPCLK2Freq>
 8001c5e:	e7eb      	b.n	8001c38 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c60:	6860      	ldr	r0, [r4, #4]
 8001c62:	0843      	lsrs	r3, r0, #1
 8001c64:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c68:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c70:	e7e7      	b.n	8001c42 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c72:	f7fe ff1f 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8001c76:	e7df      	b.n	8001c38 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c78:	6860      	ldr	r0, [r4, #4]
 8001c7a:	0843      	lsrs	r3, r0, #1
 8001c7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c80:	e7f4      	b.n	8001c6c <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c82:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c86:	d0c9      	beq.n	8001c1c <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8001c88:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e7db      	b.n	8001c46 <UART_SetConfig+0x1d6>
 8001c8e:	bf00      	nop
 8001c90:	efff69f3 	.word	0xefff69f3
 8001c94:	40008000 	.word	0x40008000
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	080037b0 	.word	0x080037b0
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	080037b4 	.word	0x080037b4
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	000ffcff 	.word	0x000ffcff
 8001cb0:	f4240000 	.word	0xf4240000

08001cb4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cb6:	07da      	lsls	r2, r3, #31
{
 8001cb8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cba:	d506      	bpl.n	8001cca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001cbc:	6801      	ldr	r1, [r0, #0]
 8001cbe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001cc0:	684a      	ldr	r2, [r1, #4]
 8001cc2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cc6:	4322      	orrs	r2, r4
 8001cc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001cca:	079c      	lsls	r4, r3, #30
 8001ccc:	d506      	bpl.n	8001cdc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001cce:	6801      	ldr	r1, [r0, #0]
 8001cd0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cd2:	684a      	ldr	r2, [r1, #4]
 8001cd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cd8:	4322      	orrs	r2, r4
 8001cda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cdc:	0759      	lsls	r1, r3, #29
 8001cde:	d506      	bpl.n	8001cee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ce0:	6801      	ldr	r1, [r0, #0]
 8001ce2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ce4:	684a      	ldr	r2, [r1, #4]
 8001ce6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cea:	4322      	orrs	r2, r4
 8001cec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cee:	071a      	lsls	r2, r3, #28
 8001cf0:	d506      	bpl.n	8001d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cf2:	6801      	ldr	r1, [r0, #0]
 8001cf4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cf6:	684a      	ldr	r2, [r1, #4]
 8001cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfc:	4322      	orrs	r2, r4
 8001cfe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d00:	06dc      	lsls	r4, r3, #27
 8001d02:	d506      	bpl.n	8001d12 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d08:	688a      	ldr	r2, [r1, #8]
 8001d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d0e:	4322      	orrs	r2, r4
 8001d10:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d12:	0699      	lsls	r1, r3, #26
 8001d14:	d506      	bpl.n	8001d24 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d16:	6801      	ldr	r1, [r0, #0]
 8001d18:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d1a:	688a      	ldr	r2, [r1, #8]
 8001d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d20:	4322      	orrs	r2, r4
 8001d22:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d24:	065a      	lsls	r2, r3, #25
 8001d26:	d50f      	bpl.n	8001d48 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d2c:	684a      	ldr	r2, [r1, #4]
 8001d2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d32:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d38:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d3a:	d105      	bne.n	8001d48 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d3c:	684a      	ldr	r2, [r1, #4]
 8001d3e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d40:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d44:	4322      	orrs	r2, r4
 8001d46:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	d506      	bpl.n	8001d5a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d4c:	6802      	ldr	r2, [r0, #0]
 8001d4e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d50:	6853      	ldr	r3, [r2, #4]
 8001d52:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6053      	str	r3, [r2, #4]
 8001d5a:	bd10      	pop	{r4, pc}

08001d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d60:	9d06      	ldr	r5, [sp, #24]
 8001d62:	4604      	mov	r4, r0
 8001d64:	460f      	mov	r7, r1
 8001d66:	4616      	mov	r6, r2
 8001d68:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d6a:	6821      	ldr	r1, [r4, #0]
 8001d6c:	69ca      	ldr	r2, [r1, #28]
 8001d6e:	ea37 0302 	bics.w	r3, r7, r2
 8001d72:	bf0c      	ite	eq
 8001d74:	2201      	moveq	r2, #1
 8001d76:	2200      	movne	r2, #0
 8001d78:	42b2      	cmp	r2, r6
 8001d7a:	d002      	beq.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d7c:	2000      	movs	r0, #0
}
 8001d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	1c6b      	adds	r3, r5, #1
 8001d84:	d0f2      	beq.n	8001d6c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d86:	b99d      	cbnz	r5, 8001db0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001da0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001da4:	2300      	movs	r3, #0
 8001da6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001daa:	2003      	movs	r0, #3
 8001dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001db0:	f7fe fc16 	bl	80005e0 <HAL_GetTick>
 8001db4:	eba0 0008 	sub.w	r0, r0, r8
 8001db8:	4285      	cmp	r5, r0
 8001dba:	d2d6      	bcs.n	8001d6a <UART_WaitOnFlagUntilTimeout+0xe>
 8001dbc:	e7e4      	b.n	8001d88 <UART_WaitOnFlagUntilTimeout+0x2c>

08001dbe <HAL_UART_Transmit>:
{
 8001dbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dc2:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001dc4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001dc8:	2b20      	cmp	r3, #32
{
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460d      	mov	r5, r1
 8001dce:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001dd0:	d14a      	bne.n	8001e68 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	d046      	beq.n	8001e64 <HAL_UART_Transmit+0xa6>
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001dda:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d042      	beq.n	8001e68 <HAL_UART_Transmit+0xaa>
 8001de2:	2301      	movs	r3, #1
 8001de4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dec:	2321      	movs	r3, #33	; 0x21
 8001dee:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001df2:	f7fe fbf5 	bl	80005e0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001df6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001dfa:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001dfc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001e00:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e04:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001e06:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e08:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001e0a:	b952      	cbnz	r2, 8001e22 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff ffa4 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001e14:	b958      	cbnz	r0, 8001e2e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001e16:	2320      	movs	r3, #32
 8001e18:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001e1c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001e20:	e006      	b.n	8001e30 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ff98 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001e2c:	b118      	cbz	r0, 8001e36 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
}
 8001e30:	b002      	add	sp, #8
 8001e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e36:	68a3      	ldr	r3, [r4, #8]
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d10d      	bne.n	8001e5c <HAL_UART_Transmit+0x9e>
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	b95b      	cbnz	r3, 8001e5c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e44:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001e4e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001e5a:	e7d1      	b.n	8001e00 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e5c:	782b      	ldrb	r3, [r5, #0]
 8001e5e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e60:	3501      	adds	r5, #1
 8001e62:	e7f4      	b.n	8001e4e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e7e3      	b.n	8001e30 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001e68:	2002      	movs	r0, #2
 8001e6a:	e7e1      	b.n	8001e30 <HAL_UART_Transmit+0x72>

08001e6c <HAL_UART_Receive>:
{
 8001e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e70:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e72:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001e76:	2b20      	cmp	r3, #32
{
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e7e:	d160      	bne.n	8001f42 <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8001e80:	2900      	cmp	r1, #0
 8001e82:	d05c      	beq.n	8001f3e <HAL_UART_Receive+0xd2>
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	d05a      	beq.n	8001f3e <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8001e88:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d058      	beq.n	8001f42 <HAL_UART_Receive+0xd6>
 8001e90:	2301      	movs	r3, #1
 8001e92:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e9a:	2322      	movs	r3, #34	; 0x22
 8001e9c:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8001ea0:	f7fe fb9e 	bl	80005e0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001ea4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8001ea6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001eae:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001eb0:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001eb4:	d115      	bne.n	8001ee2 <HAL_UART_Receive+0x76>
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	b98b      	cbnz	r3, 8001ede <HAL_UART_Receive+0x72>
 8001eba:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001ebe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001ec2:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 8001ec6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001eca:	b280      	uxth	r0, r0
 8001ecc:	b9b8      	cbnz	r0, 8001efe <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8001ed4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001ed8:	b002      	add	sp, #8
 8001eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001ede:	23ff      	movs	r3, #255	; 0xff
 8001ee0:	e7ed      	b.n	8001ebe <HAL_UART_Receive+0x52>
 8001ee2:	b923      	cbnz	r3, 8001eee <HAL_UART_Receive+0x82>
 8001ee4:	6923      	ldr	r3, [r4, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f9      	beq.n	8001ede <HAL_UART_Receive+0x72>
 8001eea:	237f      	movs	r3, #127	; 0x7f
 8001eec:	e7e7      	b.n	8001ebe <HAL_UART_Receive+0x52>
 8001eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef2:	d1e6      	bne.n	8001ec2 <HAL_UART_Receive+0x56>
 8001ef4:	6923      	ldr	r3, [r4, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f7      	beq.n	8001eea <HAL_UART_Receive+0x7e>
 8001efa:	233f      	movs	r3, #63	; 0x3f
 8001efc:	e7df      	b.n	8001ebe <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	f8cd 8000 	str.w	r8, [sp]
 8001f02:	463b      	mov	r3, r7
 8001f04:	2200      	movs	r2, #0
 8001f06:	2120      	movs	r1, #32
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff27 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001f0e:	b9d0      	cbnz	r0, 8001f46 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f10:	68a3      	ldr	r3, [r4, #8]
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	d10c      	bne.n	8001f34 <HAL_UART_Receive+0xc8>
 8001f1a:	6922      	ldr	r2, [r4, #16]
 8001f1c:	b952      	cbnz	r2, 8001f34 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f20:	4033      	ands	r3, r6
 8001f22:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001f26:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001f32:	e7c8      	b.n	8001ec6 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f36:	4033      	ands	r3, r6
 8001f38:	702b      	strb	r3, [r5, #0]
 8001f3a:	3501      	adds	r5, #1
 8001f3c:	e7f3      	b.n	8001f26 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e7ca      	b.n	8001ed8 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8001f42:	2002      	movs	r0, #2
 8001f44:	e7c8      	b.n	8001ed8 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001f46:	2003      	movs	r0, #3
 8001f48:	e7c6      	b.n	8001ed8 <HAL_UART_Receive+0x6c>

08001f4a <UART_CheckIdleState>:
{
 8001f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f4c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	2600      	movs	r6, #0
 8001f50:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001f52:	f7fe fb45 	bl	80005e0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001f5c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f5e:	d417      	bmi.n	8001f90 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	075b      	lsls	r3, r3, #29
 8001f66:	d50a      	bpl.n	8001f7e <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	462b      	mov	r3, r5
 8001f72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fef0 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001f7c:	b9a0      	cbnz	r0, 8001fa8 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001f7e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001f80:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f82:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001f86:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001f8a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001f8e:	e00c      	b.n	8001faa <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4632      	mov	r2, r6
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fedc 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d0db      	beq.n	8001f60 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001fa8:	2003      	movs	r0, #3
}
 8001faa:	b002      	add	sp, #8
 8001fac:	bd70      	pop	{r4, r5, r6, pc}

08001fae <HAL_UART_Init>:
{
 8001fae:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	b360      	cbz	r0, 800200e <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001fb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fbc:	b91b      	cbnz	r3, 8001fc6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fbe:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001fc2:	f000 fb1f 	bl	8002604 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fc8:	2324      	movs	r3, #36	; 0x24
 8001fca:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff fd4a 	bl	8001a70 <UART_SetConfig>
 8001fdc:	2801      	cmp	r0, #1
 8001fde:	d016      	beq.n	800200e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fe2:	b113      	cbz	r3, 8001fea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fe65 	bl	8001cb4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ffa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002002:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800200a:	f7ff bf9e 	b.w	8001f4a <UART_CheckIdleState>
}
 800200e:	2001      	movs	r0, #1
 8002010:	bd10      	pop	{r4, pc}
	...

08002014 <Forward>:
void setSpeed(uint8_t left, uint8_t right) {
	htim1.Instance->CCR1 = left;
	htim1.Instance->CCR2 = right;
}

void Forward(int pwm) {
 8002014:	b538      	push	{r3, r4, r5, lr}

	//M1 Directions
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_SET);
 8002016:	4d0f      	ldr	r5, [pc, #60]	; (8002054 <Forward+0x40>)
void Forward(int pwm) {
 8002018:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f7fe fcb8 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_SET);
 8002028:	2201      	movs	r2, #1
 800202a:	2110      	movs	r1, #16
 800202c:	4628      	mov	r0, r5
 800202e:	f7fe fcb3 	bl	8000998 <HAL_GPIO_WritePin>

	//M2 Directions
	HAL_GPIO_WritePin(GPIOB, M2_dir2_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	4628      	mov	r0, r5
 8002038:	f7fe fcae 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	2102      	movs	r1, #2
 8002040:	4628      	mov	r0, r5
 8002042:	f7fe fca9 	bl	8000998 <HAL_GPIO_WritePin>
	htim1.Instance->CCR1 = left;
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <Forward+0x44>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b2e4      	uxtb	r4, r4
 800204c:	635c      	str	r4, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = right;
 800204e:	639c      	str	r4, [r3, #56]	; 0x38
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	bf00      	nop
 8002054:	48000400 	.word	0x48000400
 8002058:	20000194 	.word	0x20000194

0800205c <Backward>:

	setSpeed(pwm, pwm);
}

void Backward(int pwm) {
 800205c:	b538      	push	{r3, r4, r5, lr}
	//M1 Directions
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_RESET);
 800205e:	4d0f      	ldr	r5, [pc, #60]	; (800209c <Backward+0x40>)
void Backward(int pwm) {
 8002060:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f7fe fc94 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2110      	movs	r1, #16
 8002074:	4628      	mov	r0, r5
 8002076:	f7fe fc8f 	bl	8000998 <HAL_GPIO_WritePin>

	//M2 Directions
	HAL_GPIO_WritePin(GPIOB, M2_dir2_Pin, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	4628      	mov	r0, r5
 8002080:	f7fe fc8a 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	2102      	movs	r1, #2
 8002088:	4628      	mov	r0, r5
 800208a:	f7fe fc85 	bl	8000998 <HAL_GPIO_WritePin>
	htim1.Instance->CCR1 = left;
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <Backward+0x44>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b2e4      	uxtb	r4, r4
 8002094:	635c      	str	r4, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = right;
 8002096:	639c      	str	r4, [r3, #56]	; 0x38
 8002098:	bd38      	pop	{r3, r4, r5, pc}
 800209a:	bf00      	nop
 800209c:	48000400 	.word	0x48000400
 80020a0:	20000194 	.word	0x20000194

080020a4 <Right>:

	setSpeed(pwm, pwm);
}

void Right(int pwm) {
 80020a4:	b538      	push	{r3, r4, r5, lr}
	//M1 Directions
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_RESET);
 80020a6:	4d13      	ldr	r5, [pc, #76]	; (80020f4 <Right+0x50>)
void Right(int pwm) {
 80020a8:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f7fe fc70 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_RESET);
 80020b8:	4628      	mov	r0, r5
 80020ba:	2200      	movs	r2, #0
 80020bc:	2110      	movs	r1, #16
 80020be:	f7fe fc6b 	bl	8000998 <HAL_GPIO_WritePin>

	//M2 Directions
	HAL_GPIO_WritePin(GPIOB, M2_dir2_Pin, GPIO_PIN_RESET);
 80020c2:	4628      	mov	r0, r5
 80020c4:	2200      	movs	r2, #0
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	f7fe fc66 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_SET);
 80020cc:	4628      	mov	r0, r5
	htim1.Instance->CCR1 = left;
 80020ce:	4d0a      	ldr	r5, [pc, #40]	; (80020f8 <Right+0x54>)
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2102      	movs	r1, #2
 80020d4:	f7fe fc60 	bl	8000998 <HAL_GPIO_WritePin>
	htim1.Instance->CCR1 = left;
 80020d8:	682b      	ldr	r3, [r5, #0]
 80020da:	b2e4      	uxtb	r4, r4
 80020dc:	635c      	str	r4, [r3, #52]	; 0x34

	setSpeed(pwm, pwm);
	HAL_Delay(300);
 80020de:	f44f 7096 	mov.w	r0, #300	; 0x12c
	htim1.Instance->CCR2 = right;
 80020e2:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_Delay(300);
 80020e4:	f7fe fa82 	bl	80005ec <HAL_Delay>
	htim1.Instance->CCR1 = left;
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = right;
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
 80020f0:	bd38      	pop	{r3, r4, r5, pc}
 80020f2:	bf00      	nop
 80020f4:	48000400 	.word	0x48000400
 80020f8:	20000194 	.word	0x20000194

080020fc <Left>:
	setSpeed(0, 0);
}

void Left(int pwm) {
 80020fc:	b538      	push	{r3, r4, r5, lr}
	//M1 Directions
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_SET);
 80020fe:	4d13      	ldr	r5, [pc, #76]	; (800214c <Left+0x50>)
void Left(int pwm) {
 8002100:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210c:	f7fe fc44 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_dir1_Pin, GPIO_PIN_SET);
 8002110:	4628      	mov	r0, r5
 8002112:	2201      	movs	r2, #1
 8002114:	2110      	movs	r1, #16
 8002116:	f7fe fc3f 	bl	8000998 <HAL_GPIO_WritePin>

	//M2 Directions
	HAL_GPIO_WritePin(GPIOB, M2_dir2_Pin, GPIO_PIN_SET);
 800211a:	4628      	mov	r0, r5
 800211c:	2201      	movs	r2, #1
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	f7fe fc3a 	bl	8000998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_RESET);
 8002124:	4628      	mov	r0, r5
	htim1.Instance->CCR1 = left;
 8002126:	4d0a      	ldr	r5, [pc, #40]	; (8002150 <Left+0x54>)
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2102      	movs	r1, #2
 800212c:	f7fe fc34 	bl	8000998 <HAL_GPIO_WritePin>
	htim1.Instance->CCR1 = left;
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	b2e4      	uxtb	r4, r4
 8002134:	635c      	str	r4, [r3, #52]	; 0x34

	setSpeed(pwm, pwm);
	HAL_Delay(300);
 8002136:	f44f 7096 	mov.w	r0, #300	; 0x12c
	htim1.Instance->CCR2 = right;
 800213a:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_Delay(300);
 800213c:	f7fe fa56 	bl	80005ec <HAL_Delay>
	htim1.Instance->CCR1 = left;
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = right;
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	bf00      	nop
 800214c:	48000400 	.word	0x48000400
 8002150:	20000194 	.word	0x20000194

08002154 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	b0ac      	sub	sp, #176	; 0xb0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002158:	2414      	movs	r4, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800215a:	2244      	movs	r2, #68	; 0x44
 800215c:	2100      	movs	r1, #0
 800215e:	a806      	add	r0, sp, #24
 8002160:	f000 fba0 	bl	80028a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002164:	4622      	mov	r2, r4
 8002166:	2100      	movs	r1, #0
 8002168:	a801      	add	r0, sp, #4
 800216a:	f000 fb9b 	bl	80028a4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800216e:	2100      	movs	r1, #0
 8002170:	2254      	movs	r2, #84	; 0x54
 8002172:	a817      	add	r0, sp, #92	; 0x5c
 8002174:	f000 fb96 	bl	80028a4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002178:	f7fe fc14 	bl	80009a4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <SystemClock_Config+0x94>)
 800217e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002182:	f023 0318 	bic.w	r3, r3, #24
 8002186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800218a:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
 800218c:	2210      	movs	r2, #16
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800218e:	2501      	movs	r5, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8002190:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002192:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002194:	2400      	movs	r4, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002196:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLN = 16;
 8002198:	9213      	str	r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800219a:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800219c:	2207      	movs	r2, #7
 800219e:	9214      	str	r2, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021a2:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021a4:	9316      	str	r3, [sp, #88]	; 0x58
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	2603      	movs	r6, #3
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021a8:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021aa:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ac:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021ae:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80021b0:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021b2:	f7fe fcd3 	bl	8000b5c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021b6:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80021b8:	4629      	mov	r1, r5
 80021ba:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021bc:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021be:	9602      	str	r6, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c0:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021c2:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c4:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80021c6:	f7fe ff1b 	bl	8001000 <HAL_RCC_ClockConfig>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
			| RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80021ca:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80021cc:	9617      	str	r6, [sp, #92]	; 0x5c
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021ce:	941f      	str	r4, [sp, #124]	; 0x7c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d0:	9420      	str	r4, [sp, #128]	; 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80021d2:	f7ff f857 	bl	8001284 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021da:	f7fe fbf3 	bl	80009c4 <HAL_PWREx_ControlVoltageScaling>
			!= HAL_OK) {
		Error_Handler();
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80021de:	f7ff f995 	bl	800150c <HAL_RCCEx_EnableMSIPLLMode>
}
 80021e2:	b02c      	add	sp, #176	; 0xb0
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000

080021ec <main>:
int main(void) {
 80021ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80021f0:	4dae      	ldr	r5, [pc, #696]	; (80024ac <main+0x2c0>)
int main(void) {
 80021f2:	b09b      	sub	sp, #108	; 0x6c
	HAL_Init();
 80021f4:	f7fe f9dc 	bl	80005b0 <HAL_Init>
	SystemClock_Config();
 80021f8:	f7ff ffac 	bl	8002154 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80021fc:	2214      	movs	r2, #20
 80021fe:	2100      	movs	r1, #0
 8002200:	a80f      	add	r0, sp, #60	; 0x3c
 8002202:	f000 fb4f 	bl	80028a4 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002206:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin,
 8002208:	48a9      	ldr	r0, [pc, #676]	; (80024b0 <main+0x2c4>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002210:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800221a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002222:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	9303      	str	r3, [sp, #12]
 800222a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800222c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002234:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin,
 800223c:	2200      	movs	r2, #0
 800223e:	2192      	movs	r1, #146	; 0x92
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002240:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin,
 8002242:	f7fe fba9 	bl	8000998 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

	/*Configure GPIO pins : M2_dir1_Pin M1_dir1_Pin M2_dir2_Pin */
	GPIO_InitStruct.Pin = M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(M1_dir2_GPIO_Port, M1_dir2_Pin, GPIO_PIN_RESET);
 8002252:	f7fe fba1 	bl	8000998 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin;
 8002258:	2392      	movs	r3, #146	; 0x92
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	a90f      	add	r1, sp, #60	; 0x3c
 800225c:	4894      	ldr	r0, [pc, #592]	; (80024b0 <main+0x2c4>)
	GPIO_InitStruct.Pin = M2_dir1_Pin | M1_dir1_Pin | M2_dir2_Pin;
 800225e:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f7fe fae3 	bl	8000830 <HAL_GPIO_Init>

	/*Configure GPIO pin : M1_dir2_Pin */
	GPIO_InitStruct.Pin = M1_dir2_Pin;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(M1_dir2_GPIO_Port, &GPIO_InitStruct);
 800226e:	a90f      	add	r1, sp, #60	; 0x3c
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = M1_dir2_Pin;
 8002274:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(M1_dir2_GPIO_Port, &GPIO_InitStruct);
 800227c:	f7fe fad8 	bl	8000830 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002280:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002282:	4333      	orrs	r3, r6
 8002284:	64ab      	str	r3, [r5, #72]	; 0x48
 8002286:	6cab      	ldr	r3, [r5, #72]	; 0x48
	htim1.Instance = TIM1;
 8002288:	4d8a      	ldr	r5, [pc, #552]	; (80024b4 <main+0x2c8>)
	__HAL_RCC_DMA1_CLK_ENABLE()
 800228a:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800228c:	4622      	mov	r2, r4
 800228e:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002290:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002292:	200f      	movs	r0, #15
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002294:	9b01      	ldr	r3, [sp, #4]
	huart1.Instance = USART1;
 8002296:	4e88      	ldr	r6, [pc, #544]	; (80024b8 <main+0x2cc>)
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002298:	f7fe f9c8 	bl	800062c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f7fe f9f9 	bl	8000694 <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022a2:	4621      	mov	r1, r4
 80022a4:	221c      	movs	r2, #28
 80022a6:	a808      	add	r0, sp, #32
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022a8:	9405      	str	r4, [sp, #20]
 80022aa:	9406      	str	r4, [sp, #24]
 80022ac:	9407      	str	r4, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022ae:	f000 faf9 	bl	80028a4 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80022b2:	222c      	movs	r2, #44	; 0x2c
 80022b4:	4621      	mov	r1, r4
 80022b6:	a80f      	add	r0, sp, #60	; 0x3c
 80022b8:	f000 faf4 	bl	80028a4 <memset>
	htim1.Instance = TIM1;
 80022bc:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <main+0x2d0>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022be:	60ac      	str	r4, [r5, #8]
	htim1.Init.Period = 255;
 80022c0:	f04f 08ff 	mov.w	r8, #255	; 0xff
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80022c4:	4628      	mov	r0, r5
	htim1.Init.Prescaler = 0;
 80022c6:	e885 0018 	stmia.w	r5, {r3, r4}
	htim1.Init.Period = 255;
 80022ca:	f8c5 800c 	str.w	r8, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 80022d0:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d2:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80022d4:	f7ff fa54 	bl	8001780 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80022d8:	a905      	add	r1, sp, #20
 80022da:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	9405      	str	r4, [sp, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022de:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	9407      	str	r4, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80022e2:	f7ff fb5f 	bl	80019a4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e6:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80022e8:	4622      	mov	r2, r4
 80022ea:	a908      	add	r1, sp, #32
 80022ec:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ee:	9308      	str	r3, [sp, #32]
	sConfigOC.Pulse = 0;
 80022f0:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f2:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022f4:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f6:	940c      	str	r4, [sp, #48]	; 0x30
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022f8:	940d      	str	r4, [sp, #52]	; 0x34
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022fa:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80022fc:	f7ff fa92 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002300:	2204      	movs	r2, #4
 8002302:	a908      	add	r1, sp, #32
 8002304:	4628      	mov	r0, r5
 8002306:	f7ff fa8d 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800230a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800230e:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002310:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002312:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002318:	9317      	str	r3, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800231a:	940f      	str	r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800231c:	9410      	str	r4, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800231e:	9411      	str	r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.DeadTime = 0;
 8002320:	9412      	str	r4, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002322:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002324:	9415      	str	r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002326:	9416      	str	r4, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002328:	9418      	str	r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800232a:	9419      	str	r4, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800232c:	f7ff fb62 	bl	80019f4 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_MspPostInit(&htim1);
 8002330:	4628      	mov	r0, r5
 8002332:	f000 f93f 	bl	80025b4 <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 8002336:	4b62      	ldr	r3, [pc, #392]	; (80024c0 <main+0x2d4>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002338:	60b4      	str	r4, [r6, #8]
	huart1.Init.BaudRate = 9600;
 800233a:	f44f 5916 	mov.w	r9, #9600	; 0x2580
	huart1.Init.Mode = UART_MODE_TX_RX;
 800233e:	270c      	movs	r7, #12
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002340:	4630      	mov	r0, r6
	huart1.Init.BaudRate = 9600;
 8002342:	e886 0208 	stmia.w	r6, {r3, r9}
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002346:	60f4      	str	r4, [r6, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002348:	6134      	str	r4, [r6, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800234a:	6177      	str	r7, [r6, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234c:	61b4      	str	r4, [r6, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800234e:	61f4      	str	r4, [r6, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002350:	6234      	str	r4, [r6, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002352:	6274      	str	r4, [r6, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002354:	f7ff fe2b 	bl	8001fae <HAL_UART_Init>
	huart2.Instance = USART2;
 8002358:	485a      	ldr	r0, [pc, #360]	; (80024c4 <main+0x2d8>)
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <main+0x2dc>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 800235c:	6147      	str	r7, [r0, #20]
	speed = 255;	//FULL SPEED
 800235e:	4f5b      	ldr	r7, [pc, #364]	; (80024cc <main+0x2e0>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002360:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 9600;
 8002362:	e880 0208 	stmia.w	r0, {r3, r9}
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002366:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002368:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002370:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002372:	f7ff fe1c 	bl	8001fae <HAL_UART_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002376:	4621      	mov	r1, r4
 8002378:	4628      	mov	r0, r5
	speed = 255;	//FULL SPEED
 800237a:	f8c7 8000 	str.w	r8, [r7]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800237e:	f7ff fae5 	bl	800194c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002382:	2104      	movs	r1, #4
 8002384:	4628      	mov	r0, r5
 8002386:	f7ff fae1 	bl	800194c <HAL_TIM_PWM_Start>
	printf("BT Test! \r\n");
 800238a:	4851      	ldr	r0, [pc, #324]	; (80024d0 <main+0x2e4>)
		if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 30, 500)) {
 800238c:	4c51      	ldr	r4, [pc, #324]	; (80024d4 <main+0x2e8>)
						sprintf(txData, "Stop\n"), 500);
 800238e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80024fc <main+0x310>
	printf("BT Test! \r\n");
 8002392:	f000 fb03 	bl	800299c <puts>
 8002396:	46b8      	mov	r8, r7
		if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 30, 500)) {
 8002398:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800239c:	221e      	movs	r2, #30
 800239e:	494d      	ldr	r1, [pc, #308]	; (80024d4 <main+0x2e8>)
 80023a0:	4630      	mov	r0, r6
 80023a2:	f7ff fd63 	bl	8001e6c <HAL_UART_Receive>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d0f6      	beq.n	8002398 <main+0x1ac>
			if (rxData[0] == 'f' && rxData[1] == 'o' && rxData[2] == 'r') {
 80023aa:	7823      	ldrb	r3, [r4, #0]
 80023ac:	2b66      	cmp	r3, #102	; 0x66
 80023ae:	d118      	bne.n	80023e2 <main+0x1f6>
 80023b0:	7863      	ldrb	r3, [r4, #1]
 80023b2:	2b6f      	cmp	r3, #111	; 0x6f
 80023b4:	d1f0      	bne.n	8002398 <main+0x1ac>
 80023b6:	78a3      	ldrb	r3, [r4, #2]
 80023b8:	2b72      	cmp	r3, #114	; 0x72
 80023ba:	d1ed      	bne.n	8002398 <main+0x1ac>
						sprintf(txData, "Forward\n"), 500);
 80023bc:	4946      	ldr	r1, [pc, #280]	; (80024d8 <main+0x2ec>)
 80023be:	4847      	ldr	r0, [pc, #284]	; (80024dc <main+0x2f0>)
 80023c0:	f000 faf4 	bl	80029ac <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 80023c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023c8:	2208      	movs	r2, #8
 80023ca:	4944      	ldr	r1, [pc, #272]	; (80024dc <main+0x2f0>)
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7ff fcf6 	bl	8001dbe <HAL_UART_Transmit>
				Forward(speed);
 80023d2:	f8d8 0000 	ldr.w	r0, [r8]
 80023d6:	f7ff fe1d 	bl	8002014 <Forward>
				printf("Forward \n\r");
 80023da:	4841      	ldr	r0, [pc, #260]	; (80024e0 <main+0x2f4>)
				printf("Backward\n\r");
 80023dc:	f000 fa6a 	bl	80028b4 <iprintf>
 80023e0:	e7da      	b.n	8002398 <main+0x1ac>
			} else if (rxData[0] == 'b' && rxData[1] == 'a' && rxData[2] == 'c'
 80023e2:	2b62      	cmp	r3, #98	; 0x62
 80023e4:	d119      	bne.n	800241a <main+0x22e>
 80023e6:	7863      	ldrb	r3, [r4, #1]
 80023e8:	2b61      	cmp	r3, #97	; 0x61
 80023ea:	d1d5      	bne.n	8002398 <main+0x1ac>
 80023ec:	78a3      	ldrb	r3, [r4, #2]
 80023ee:	2b63      	cmp	r3, #99	; 0x63
 80023f0:	d1d2      	bne.n	8002398 <main+0x1ac>
					&& rxData[3] == 'k') {
 80023f2:	78e3      	ldrb	r3, [r4, #3]
 80023f4:	2b6b      	cmp	r3, #107	; 0x6b
 80023f6:	d1cf      	bne.n	8002398 <main+0x1ac>
						sprintf(txData, "Backward\n"), 500);
 80023f8:	493a      	ldr	r1, [pc, #232]	; (80024e4 <main+0x2f8>)
 80023fa:	4838      	ldr	r0, [pc, #224]	; (80024dc <main+0x2f0>)
 80023fc:	f000 fad6 	bl	80029ac <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8002400:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002404:	2209      	movs	r2, #9
 8002406:	4935      	ldr	r1, [pc, #212]	; (80024dc <main+0x2f0>)
 8002408:	4630      	mov	r0, r6
 800240a:	f7ff fcd8 	bl	8001dbe <HAL_UART_Transmit>
				Backward(speed);
 800240e:	f8d8 0000 	ldr.w	r0, [r8]
 8002412:	f7ff fe23 	bl	800205c <Backward>
				printf("Backward\n\r");
 8002416:	4834      	ldr	r0, [pc, #208]	; (80024e8 <main+0x2fc>)
 8002418:	e7e0      	b.n	80023dc <main+0x1f0>
			} else if (rxData[0] == 'l' && rxData[1] == 'e' && rxData[2] == 'f'
 800241a:	2b6c      	cmp	r3, #108	; 0x6c
 800241c:	d11f      	bne.n	800245e <main+0x272>
 800241e:	7863      	ldrb	r3, [r4, #1]
 8002420:	2b65      	cmp	r3, #101	; 0x65
 8002422:	d1b9      	bne.n	8002398 <main+0x1ac>
 8002424:	78a3      	ldrb	r3, [r4, #2]
 8002426:	2b66      	cmp	r3, #102	; 0x66
 8002428:	d1b6      	bne.n	8002398 <main+0x1ac>
					&& rxData[3] == 't') {
 800242a:	78e3      	ldrb	r3, [r4, #3]
 800242c:	2b74      	cmp	r3, #116	; 0x74
 800242e:	d1b3      	bne.n	8002398 <main+0x1ac>
						sprintf(txData, "Left\n"), 500);
 8002430:	492e      	ldr	r1, [pc, #184]	; (80024ec <main+0x300>)
 8002432:	482a      	ldr	r0, [pc, #168]	; (80024dc <main+0x2f0>)
 8002434:	f000 faba 	bl	80029ac <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8002438:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800243c:	2205      	movs	r2, #5
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <main+0x2f0>)
 8002440:	4630      	mov	r0, r6
 8002442:	f7ff fcbc 	bl	8001dbe <HAL_UART_Transmit>
				Left(speed);
 8002446:	f8d8 0000 	ldr.w	r0, [r8]
 800244a:	f7ff fe57 	bl	80020fc <Left>
				for (int i = 0; i < 30; i++)	//clear the  buffer
 800244e:	2300      	movs	r3, #0
					rxData[i] = '\0';
 8002450:	461a      	mov	r2, r3
 8002452:	54e2      	strb	r2, [r4, r3]
				for (int i = 0; i < 30; i++)	//clear the  buffer
 8002454:	3301      	adds	r3, #1
 8002456:	2b1e      	cmp	r3, #30
 8002458:	d1fb      	bne.n	8002452 <main+0x266>
				printf("Left\n\r");
 800245a:	4825      	ldr	r0, [pc, #148]	; (80024f0 <main+0x304>)
 800245c:	e7be      	b.n	80023dc <main+0x1f0>
			} else if (rxData[0] == 'r' && rxData[1] == 'i' && rxData[2] == 'g'
 800245e:	2b72      	cmp	r3, #114	; 0x72
 8002460:	d14e      	bne.n	8002500 <main+0x314>
 8002462:	7863      	ldrb	r3, [r4, #1]
 8002464:	2b69      	cmp	r3, #105	; 0x69
 8002466:	d197      	bne.n	8002398 <main+0x1ac>
 8002468:	78a3      	ldrb	r3, [r4, #2]
 800246a:	2b67      	cmp	r3, #103	; 0x67
 800246c:	d194      	bne.n	8002398 <main+0x1ac>
					&& rxData[3] == 'h' && rxData[4] == 't') {
 800246e:	78e3      	ldrb	r3, [r4, #3]
 8002470:	2b68      	cmp	r3, #104	; 0x68
 8002472:	d191      	bne.n	8002398 <main+0x1ac>
 8002474:	7923      	ldrb	r3, [r4, #4]
 8002476:	2b74      	cmp	r3, #116	; 0x74
 8002478:	d18e      	bne.n	8002398 <main+0x1ac>
						sprintf(txData, "Right\n"), 500);
 800247a:	491e      	ldr	r1, [pc, #120]	; (80024f4 <main+0x308>)
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <main+0x2f0>)
 800247e:	f000 fa95 	bl	80029ac <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8002482:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002486:	2206      	movs	r2, #6
 8002488:	4914      	ldr	r1, [pc, #80]	; (80024dc <main+0x2f0>)
 800248a:	4630      	mov	r0, r6
 800248c:	f7ff fc97 	bl	8001dbe <HAL_UART_Transmit>
				Right(speed);
 8002490:	f8d8 0000 	ldr.w	r0, [r8]
 8002494:	f7ff fe06 	bl	80020a4 <Right>
				printf("Right\n\r");
 8002498:	4817      	ldr	r0, [pc, #92]	; (80024f8 <main+0x30c>)
 800249a:	f000 fa0b 	bl	80028b4 <iprintf>
				for (int i = 0; i < 30; i++)
 800249e:	2300      	movs	r3, #0
					rxData[i] = '\0';
 80024a0:	461a      	mov	r2, r3
 80024a2:	54e2      	strb	r2, [r4, r3]
				for (int i = 0; i < 30; i++)
 80024a4:	3301      	adds	r3, #1
 80024a6:	2b1e      	cmp	r3, #30
 80024a8:	d1fb      	bne.n	80024a2 <main+0x2b6>
 80024aa:	e775      	b.n	8002398 <main+0x1ac>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	20000194 	.word	0x20000194
 80024b8:	2000011c 	.word	0x2000011c
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40013800 	.word	0x40013800
 80024c4:	200001d4 	.word	0x200001d4
 80024c8:	40004400 	.word	0x40004400
 80024cc:	20000084 	.word	0x20000084
 80024d0:	080037c1 	.word	0x080037c1
 80024d4:	20000098 	.word	0x20000098
 80024d8:	080037cc 	.word	0x080037cc
 80024dc:	200000b6 	.word	0x200000b6
 80024e0:	080037d5 	.word	0x080037d5
 80024e4:	080037e0 	.word	0x080037e0
 80024e8:	080037ea 	.word	0x080037ea
 80024ec:	080037f5 	.word	0x080037f5
 80024f0:	080037fb 	.word	0x080037fb
 80024f4:	08003802 	.word	0x08003802
 80024f8:	08003809 	.word	0x08003809
 80024fc:	08003811 	.word	0x08003811
			} else if (rxData[0] == 's' && rxData[1] == 't' && rxData[2] == 'o'
 8002500:	2b73      	cmp	r3, #115	; 0x73
 8002502:	f47f af49 	bne.w	8002398 <main+0x1ac>
 8002506:	7863      	ldrb	r3, [r4, #1]
 8002508:	2b74      	cmp	r3, #116	; 0x74
 800250a:	f47f af45 	bne.w	8002398 <main+0x1ac>
 800250e:	78a3      	ldrb	r3, [r4, #2]
 8002510:	2b6f      	cmp	r3, #111	; 0x6f
 8002512:	f47f af41 	bne.w	8002398 <main+0x1ac>
					&& rxData[3] == 'p') {
 8002516:	78e3      	ldrb	r3, [r4, #3]
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	f47f af3d 	bne.w	8002398 <main+0x1ac>
						sprintf(txData, "Stop\n"), 500);
 800251e:	4649      	mov	r1, r9
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <main+0x364>)
 8002522:	f000 fa43 	bl	80029ac <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8002526:	2205      	movs	r2, #5
 8002528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800252c:	4908      	ldr	r1, [pc, #32]	; (8002550 <main+0x364>)
 800252e:	4630      	mov	r0, r6
 8002530:	f7ff fc45 	bl	8001dbe <HAL_UART_Transmit>
	htim1.Instance->CCR1 = left;
 8002534:	682b      	ldr	r3, [r5, #0]
				printf("Stop\n\r");
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <main+0x368>)
	htim1.Instance->CCR1 = left;
 8002538:	2700      	movs	r7, #0
 800253a:	635f      	str	r7, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = right;
 800253c:	639f      	str	r7, [r3, #56]	; 0x38
				printf("Stop\n\r");
 800253e:	f000 f9b9 	bl	80028b4 <iprintf>
				for (int i = 0; i < 30; i++)
 8002542:	463b      	mov	r3, r7
					rxData[i] = '\0';
 8002544:	463a      	mov	r2, r7
 8002546:	54e2      	strb	r2, [r4, r3]
				for (int i = 0; i < 30; i++)
 8002548:	3301      	adds	r3, #1
 800254a:	2b1e      	cmp	r3, #30
 800254c:	d1fb      	bne.n	8002546 <main+0x35a>
 800254e:	e723      	b.n	8002398 <main+0x1ac>
 8002550:	200000b6 	.word	0x200000b6
 8002554:	08003817 	.word	0x08003817

08002558 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002558:	4770      	bx	lr
	...

0800255c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_MspInit+0x2c>)
 800255e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	661a      	str	r2, [r3, #96]	; 0x60
 8002566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002568:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	f002 0201 	and.w	r2, r2, #1
 800256e:	9200      	str	r2, [sp, #0]
 8002570:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002574:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002578:	659a      	str	r2, [r3, #88]	; 0x58
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002584:	b002      	add	sp, #8
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 800258c:	6802      	ldr	r2, [r0, #0]
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_TIM_PWM_MspInit+0x24>)
 8002590:	429a      	cmp	r2, r3
{
 8002592:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8002594:	d10a      	bne.n	80025ac <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002596:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800259a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800259c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025ac:	b002      	add	sp, #8
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00

080025b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b4:	b510      	push	{r4, lr}
 80025b6:	4604      	mov	r4, r0
 80025b8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	2214      	movs	r2, #20
 80025bc:	2100      	movs	r1, #0
 80025be:	a801      	add	r0, sp, #4
 80025c0:	f000 f970 	bl	80028a4 <memset>
  if(htim->Instance==TIM1)
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_TIM_MspPostInit+0x4c>)
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d116      	bne.n	80025fa <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f7fe f91b 	bl	8000830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025fa:	b006      	add	sp, #24
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00

08002604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	2214      	movs	r2, #20
{
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	2100      	movs	r1, #0
 8002610:	eb0d 0002 	add.w	r0, sp, r2
 8002614:	f000 f946 	bl	80028a4 <memset>
  if(huart->Instance==USART1)
 8002618:	6833      	ldr	r3, [r6, #0]
 800261a:	4a44      	ldr	r2, [pc, #272]	; (800272c <HAL_UART_MspInit+0x128>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d153      	bne.n	80026c8 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_UART_MspInit+0x12c>)
 8002622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002628:	661a      	str	r2, [r3, #96]	; 0x60
 800262a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800262c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	64da      	str	r2, [r3, #76]	; 0x4c
 800263c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263e:	f002 0201 	and.w	r2, r2, #1
 8002642:	9201      	str	r2, [sp, #4]
 8002644:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002648:	f042 0202 	orr.w	r2, r2, #2
 800264c:	64da      	str	r2, [r3, #76]	; 0x4c
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	f003 0302 	and.w	r3, r3, #2
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002656:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002658:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265a:	f44f 6880 	mov.w	r8, #1024	; 0x400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	a905      	add	r1, sp, #20
 8002664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800266c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800266e:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	f8cd 9020 	str.w	r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f7fe f8da 	bl	8000830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800267c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267e:	482d      	ldr	r0, [pc, #180]	; (8002734 <HAL_UART_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002680:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002684:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	9706      	str	r7, [sp, #24]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002688:	4c2b      	ldr	r4, [pc, #172]	; (8002738 <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	f8cd 9020 	str.w	r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f7fe f8ce 	bl	8000830 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_UART_MspInit+0x138>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002698:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a4:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026a6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026a8:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026aa:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ac:	f8c4 8018 	str.w	r8, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026b0:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b2:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026b4:	f7fe f810 	bl	80006d8 <HAL_DMA_Init>
 80026b8:	b108      	cbz	r0, 80026be <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80026ba:	f7ff ff4d 	bl	8002558 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026be:	66f4      	str	r4, [r6, #108]	; 0x6c
 80026c0:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	b00b      	add	sp, #44	; 0x2c
 80026c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(huart->Instance==USART2)
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_UART_MspInit+0x13c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d1f9      	bne.n	80026c2 <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_UART_MspInit+0x12c>)
 80026d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
 80026d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026de:	9203      	str	r2, [sp, #12]
 80026e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	9304      	str	r3, [sp, #16]
 80026f2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f4:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	a905      	add	r1, sp, #20
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002704:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f7fe f891 	bl	8000830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800270e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002712:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002722:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f7fe f884 	bl	8000830 <HAL_GPIO_Init>
}
 8002728:	e7cb      	b.n	80026c2 <HAL_UART_MspInit+0xbe>
 800272a:	bf00      	nop
 800272c:	40013800 	.word	0x40013800
 8002730:	40021000 	.word	0x40021000
 8002734:	48000400 	.word	0x48000400
 8002738:	200000d4 	.word	0x200000d4
 800273c:	40020058 	.word	0x40020058
 8002740:	40004400 	.word	0x40004400

08002744 <NMI_Handler>:
 8002744:	4770      	bx	lr

08002746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	e7fe      	b.n	800274a <BusFault_Handler>

0800274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler>

0800274e <SVC_Handler>:
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	4770      	bx	lr

08002754 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f7fd bf3c 	b.w	80005d0 <HAL_IncTick>

08002758 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002758:	4801      	ldr	r0, [pc, #4]	; (8002760 <DMA1_Channel5_IRQHandler+0x8>)
 800275a:	f7fe b81f 	b.w	800079c <HAL_DMA_IRQHandler>
 800275e:	bf00      	nop
 8002760:	200000d4 	.word	0x200000d4

08002764 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002764:	b508      	push	{r3, lr}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8002766:	2201      	movs	r2, #1
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <_read+0x1c>)
 800276e:	f7ff fb7d 	bl	8001e6c <HAL_UART_Receive>
 8002772:	2800      	cmp	r0, #0
		len = EOF;					// signal an issue with stream

	return len;
}
 8002774:	bf0c      	ite	eq
 8002776:	2001      	moveq	r0, #1
 8002778:	f04f 30ff 	movne.w	r0, #4294967295
 800277c:	bd08      	pop	{r3, pc}
 800277e:	bf00      	nop
 8002780:	200001d4 	.word	0x200001d4

08002784 <_write>:

int _write(int file, char *ptr, int len)
{
 8002784:	b510      	push	{r4, lr}

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
{
 800278a:	4614      	mov	r4, r2
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <_write+0x20>)
 800278e:	b292      	uxth	r2, r2
 8002790:	f7ff fb15 	bl	8001dbe <HAL_UART_Transmit>
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002794:	3801      	subs	r0, #1
 8002796:	b2c0      	uxtb	r0, r0
 8002798:	2801      	cmp	r0, #1
 800279a:	d801      	bhi.n	80027a0 <_write+0x1c>
	{
		Error_Handler();
 800279c:	f7ff fedc 	bl	8002558 <Error_Handler>
	}

	return len;
}
 80027a0:	4620      	mov	r0, r4
 80027a2:	bd10      	pop	{r4, pc}
 80027a4:	200001d4 	.word	0x200001d4

080027a8 <_close>:


int _close(int file)
{
	return -1;
}
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	4770      	bx	lr

080027ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80027ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	4770      	bx	lr

080027b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80027b8:	2001      	movs	r0, #1
 80027ba:	4770      	bx	lr

080027bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80027bc:	2000      	movs	r0, #0
 80027be:	4770      	bx	lr

080027c0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c0:	490f      	ldr	r1, [pc, #60]	; (8002800 <SystemInit+0x40>)
 80027c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <SystemInit+0x44>)
 80027d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80027d2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80027da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80027e2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80027e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80027e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80027f6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027fc:	608b      	str	r3, [r1, #8]
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	40021000 	.word	0x40021000

08002808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002840 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800280c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800280e:	e003      	b.n	8002818 <LoopCopyDataInit>

08002810 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002812:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002814:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002816:	3104      	adds	r1, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <LoopForever+0xa>)
	ldr	r3, =_edata
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <LoopForever+0xe>)
	adds	r2, r0, r1
 800281c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800281e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002820:	d3f6      	bcc.n	8002810 <CopyDataInit>
	ldr	r2, =_sbss
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002824:	e002      	b.n	800282c <LoopFillZerobss>

08002826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002826:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002828:	f842 3b04 	str.w	r3, [r2], #4

0800282c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <LoopForever+0x16>)
	cmp	r2, r3
 800282e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002830:	d3f9      	bcc.n	8002826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002832:	f7ff ffc5 	bl	80027c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002836:	f000 f811 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800283a:	f7ff fcd7 	bl	80021ec <main>

0800283e <LoopForever>:

LoopForever:
    b LoopForever
 800283e:	e7fe      	b.n	800283e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002840:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002844:	08003910 	.word	0x08003910
	ldr	r0, =_sdata
 8002848:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800284c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002850:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002854:	20000250 	.word	0x20000250

08002858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC1_IRQHandler>
	...

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4e0d      	ldr	r6, [pc, #52]	; (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002862:	1ba4      	subs	r4, r4, r6
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2500      	movs	r5, #0
 8002868:	42a5      	cmp	r5, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4e0b      	ldr	r6, [pc, #44]	; (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x44>)
 8002870:	f000 ff92 	bl	8003798 <_init>
 8002874:	1ba4      	subs	r4, r4, r6
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2500      	movs	r5, #0
 800287a:	42a5      	cmp	r5, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002884:	4798      	blx	r3
 8002886:	3501      	adds	r5, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288e:	4798      	blx	r3
 8002890:	3501      	adds	r5, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	08003908 	.word	0x08003908
 8002898:	08003908 	.word	0x08003908
 800289c:	08003908 	.word	0x08003908
 80028a0:	0800390c 	.word	0x0800390c

080028a4 <memset>:
 80028a4:	4402      	add	r2, r0
 80028a6:	4603      	mov	r3, r0
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d100      	bne.n	80028ae <memset+0xa>
 80028ac:	4770      	bx	lr
 80028ae:	f803 1b01 	strb.w	r1, [r3], #1
 80028b2:	e7f9      	b.n	80028a8 <memset+0x4>

080028b4 <iprintf>:
 80028b4:	b40f      	push	{r0, r1, r2, r3}
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <iprintf+0x2c>)
 80028b8:	b513      	push	{r0, r1, r4, lr}
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	b124      	cbz	r4, 80028c8 <iprintf+0x14>
 80028be:	69a3      	ldr	r3, [r4, #24]
 80028c0:	b913      	cbnz	r3, 80028c8 <iprintf+0x14>
 80028c2:	4620      	mov	r0, r4
 80028c4:	f000 fa2c 	bl	8002d20 <__sinit>
 80028c8:	ab05      	add	r3, sp, #20
 80028ca:	9a04      	ldr	r2, [sp, #16]
 80028cc:	68a1      	ldr	r1, [r4, #8]
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	4620      	mov	r0, r4
 80028d2:	f000 fbe9 	bl	80030a8 <_vfiprintf_r>
 80028d6:	b002      	add	sp, #8
 80028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028dc:	b004      	add	sp, #16
 80028de:	4770      	bx	lr
 80028e0:	20000004 	.word	0x20000004

080028e4 <_puts_r>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	460e      	mov	r6, r1
 80028e8:	4605      	mov	r5, r0
 80028ea:	b118      	cbz	r0, 80028f4 <_puts_r+0x10>
 80028ec:	6983      	ldr	r3, [r0, #24]
 80028ee:	b90b      	cbnz	r3, 80028f4 <_puts_r+0x10>
 80028f0:	f000 fa16 	bl	8002d20 <__sinit>
 80028f4:	69ab      	ldr	r3, [r5, #24]
 80028f6:	68ac      	ldr	r4, [r5, #8]
 80028f8:	b913      	cbnz	r3, 8002900 <_puts_r+0x1c>
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 fa10 	bl	8002d20 <__sinit>
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <_puts_r+0xac>)
 8002902:	429c      	cmp	r4, r3
 8002904:	d117      	bne.n	8002936 <_puts_r+0x52>
 8002906:	686c      	ldr	r4, [r5, #4]
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	071b      	lsls	r3, r3, #28
 800290c:	d51d      	bpl.n	800294a <_puts_r+0x66>
 800290e:	6923      	ldr	r3, [r4, #16]
 8002910:	b1db      	cbz	r3, 800294a <_puts_r+0x66>
 8002912:	3e01      	subs	r6, #1
 8002914:	68a3      	ldr	r3, [r4, #8]
 8002916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800291a:	3b01      	subs	r3, #1
 800291c:	60a3      	str	r3, [r4, #8]
 800291e:	b9e9      	cbnz	r1, 800295c <_puts_r+0x78>
 8002920:	2b00      	cmp	r3, #0
 8002922:	da2e      	bge.n	8002982 <_puts_r+0x9e>
 8002924:	4622      	mov	r2, r4
 8002926:	210a      	movs	r1, #10
 8002928:	4628      	mov	r0, r5
 800292a:	f000 f847 	bl	80029bc <__swbuf_r>
 800292e:	3001      	adds	r0, #1
 8002930:	d011      	beq.n	8002956 <_puts_r+0x72>
 8002932:	200a      	movs	r0, #10
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <_puts_r+0xb0>)
 8002938:	429c      	cmp	r4, r3
 800293a:	d101      	bne.n	8002940 <_puts_r+0x5c>
 800293c:	68ac      	ldr	r4, [r5, #8]
 800293e:	e7e3      	b.n	8002908 <_puts_r+0x24>
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <_puts_r+0xb4>)
 8002942:	429c      	cmp	r4, r3
 8002944:	bf08      	it	eq
 8002946:	68ec      	ldreq	r4, [r5, #12]
 8002948:	e7de      	b.n	8002908 <_puts_r+0x24>
 800294a:	4621      	mov	r1, r4
 800294c:	4628      	mov	r0, r5
 800294e:	f000 f887 	bl	8002a60 <__swsetup_r>
 8002952:	2800      	cmp	r0, #0
 8002954:	d0dd      	beq.n	8002912 <_puts_r+0x2e>
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	2b00      	cmp	r3, #0
 800295e:	da04      	bge.n	800296a <_puts_r+0x86>
 8002960:	69a2      	ldr	r2, [r4, #24]
 8002962:	4293      	cmp	r3, r2
 8002964:	db06      	blt.n	8002974 <_puts_r+0x90>
 8002966:	290a      	cmp	r1, #10
 8002968:	d004      	beq.n	8002974 <_puts_r+0x90>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	6022      	str	r2, [r4, #0]
 8002970:	7019      	strb	r1, [r3, #0]
 8002972:	e7cf      	b.n	8002914 <_puts_r+0x30>
 8002974:	4622      	mov	r2, r4
 8002976:	4628      	mov	r0, r5
 8002978:	f000 f820 	bl	80029bc <__swbuf_r>
 800297c:	3001      	adds	r0, #1
 800297e:	d1c9      	bne.n	8002914 <_puts_r+0x30>
 8002980:	e7e9      	b.n	8002956 <_puts_r+0x72>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	200a      	movs	r0, #10
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	6022      	str	r2, [r4, #0]
 800298a:	7018      	strb	r0, [r3, #0]
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	bf00      	nop
 8002990:	0800388c 	.word	0x0800388c
 8002994:	080038ac 	.word	0x080038ac
 8002998:	0800386c 	.word	0x0800386c

0800299c <puts>:
 800299c:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <puts+0xc>)
 800299e:	4601      	mov	r1, r0
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f7ff bf9f 	b.w	80028e4 <_puts_r>
 80029a6:	bf00      	nop
 80029a8:	20000004 	.word	0x20000004

080029ac <strcpy>:
 80029ac:	4603      	mov	r3, r0
 80029ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029b2:	f803 2b01 	strb.w	r2, [r3], #1
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d1f9      	bne.n	80029ae <strcpy+0x2>
 80029ba:	4770      	bx	lr

080029bc <__swbuf_r>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	460e      	mov	r6, r1
 80029c0:	4614      	mov	r4, r2
 80029c2:	4605      	mov	r5, r0
 80029c4:	b118      	cbz	r0, 80029ce <__swbuf_r+0x12>
 80029c6:	6983      	ldr	r3, [r0, #24]
 80029c8:	b90b      	cbnz	r3, 80029ce <__swbuf_r+0x12>
 80029ca:	f000 f9a9 	bl	8002d20 <__sinit>
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <__swbuf_r+0x98>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d12a      	bne.n	8002a2a <__swbuf_r+0x6e>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	69a3      	ldr	r3, [r4, #24]
 80029d8:	60a3      	str	r3, [r4, #8]
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	071a      	lsls	r2, r3, #28
 80029de:	d52e      	bpl.n	8002a3e <__swbuf_r+0x82>
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	b363      	cbz	r3, 8002a3e <__swbuf_r+0x82>
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	1ac0      	subs	r0, r0, r3
 80029ea:	6963      	ldr	r3, [r4, #20]
 80029ec:	b2f6      	uxtb	r6, r6
 80029ee:	4298      	cmp	r0, r3
 80029f0:	4637      	mov	r7, r6
 80029f2:	db04      	blt.n	80029fe <__swbuf_r+0x42>
 80029f4:	4621      	mov	r1, r4
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 f928 	bl	8002c4c <_fflush_r>
 80029fc:	bb28      	cbnz	r0, 8002a4a <__swbuf_r+0x8e>
 80029fe:	68a3      	ldr	r3, [r4, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60a3      	str	r3, [r4, #8]
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	6022      	str	r2, [r4, #0]
 8002a0a:	701e      	strb	r6, [r3, #0]
 8002a0c:	6963      	ldr	r3, [r4, #20]
 8002a0e:	3001      	adds	r0, #1
 8002a10:	4298      	cmp	r0, r3
 8002a12:	d004      	beq.n	8002a1e <__swbuf_r+0x62>
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	07db      	lsls	r3, r3, #31
 8002a18:	d519      	bpl.n	8002a4e <__swbuf_r+0x92>
 8002a1a:	2e0a      	cmp	r6, #10
 8002a1c:	d117      	bne.n	8002a4e <__swbuf_r+0x92>
 8002a1e:	4621      	mov	r1, r4
 8002a20:	4628      	mov	r0, r5
 8002a22:	f000 f913 	bl	8002c4c <_fflush_r>
 8002a26:	b190      	cbz	r0, 8002a4e <__swbuf_r+0x92>
 8002a28:	e00f      	b.n	8002a4a <__swbuf_r+0x8e>
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <__swbuf_r+0x9c>)
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	d101      	bne.n	8002a34 <__swbuf_r+0x78>
 8002a30:	68ac      	ldr	r4, [r5, #8]
 8002a32:	e7d0      	b.n	80029d6 <__swbuf_r+0x1a>
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <__swbuf_r+0xa0>)
 8002a36:	429c      	cmp	r4, r3
 8002a38:	bf08      	it	eq
 8002a3a:	68ec      	ldreq	r4, [r5, #12]
 8002a3c:	e7cb      	b.n	80029d6 <__swbuf_r+0x1a>
 8002a3e:	4621      	mov	r1, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 f80d 	bl	8002a60 <__swsetup_r>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0cc      	beq.n	80029e4 <__swbuf_r+0x28>
 8002a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8002a4e:	4638      	mov	r0, r7
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800388c 	.word	0x0800388c
 8002a58:	080038ac 	.word	0x080038ac
 8002a5c:	0800386c 	.word	0x0800386c

08002a60 <__swsetup_r>:
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <__swsetup_r+0xcc>)
 8002a62:	b570      	push	{r4, r5, r6, lr}
 8002a64:	681d      	ldr	r5, [r3, #0]
 8002a66:	4606      	mov	r6, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	b125      	cbz	r5, 8002a76 <__swsetup_r+0x16>
 8002a6c:	69ab      	ldr	r3, [r5, #24]
 8002a6e:	b913      	cbnz	r3, 8002a76 <__swsetup_r+0x16>
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 f955 	bl	8002d20 <__sinit>
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <__swsetup_r+0xd0>)
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	d10f      	bne.n	8002a9c <__swsetup_r+0x3c>
 8002a7c:	686c      	ldr	r4, [r5, #4]
 8002a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	0715      	lsls	r5, r2, #28
 8002a86:	d42c      	bmi.n	8002ae2 <__swsetup_r+0x82>
 8002a88:	06d0      	lsls	r0, r2, #27
 8002a8a:	d411      	bmi.n	8002ab0 <__swsetup_r+0x50>
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	6032      	str	r2, [r6, #0]
 8002a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <__swsetup_r+0xd4>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	d101      	bne.n	8002aa6 <__swsetup_r+0x46>
 8002aa2:	68ac      	ldr	r4, [r5, #8]
 8002aa4:	e7eb      	b.n	8002a7e <__swsetup_r+0x1e>
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <__swsetup_r+0xd8>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	bf08      	it	eq
 8002aac:	68ec      	ldreq	r4, [r5, #12]
 8002aae:	e7e6      	b.n	8002a7e <__swsetup_r+0x1e>
 8002ab0:	0751      	lsls	r1, r2, #29
 8002ab2:	d512      	bpl.n	8002ada <__swsetup_r+0x7a>
 8002ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ab6:	b141      	cbz	r1, 8002aca <__swsetup_r+0x6a>
 8002ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002abc:	4299      	cmp	r1, r3
 8002abe:	d002      	beq.n	8002ac6 <__swsetup_r+0x66>
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f000 fa1b 	bl	8002efc <_free_r>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	6923      	ldr	r3, [r4, #16]
 8002ae4:	b94b      	cbnz	r3, 8002afa <__swsetup_r+0x9a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d003      	beq.n	8002afa <__swsetup_r+0x9a>
 8002af2:	4621      	mov	r1, r4
 8002af4:	4630      	mov	r0, r6
 8002af6:	f000 f9c1 	bl	8002e7c <__smakebuf_r>
 8002afa:	89a2      	ldrh	r2, [r4, #12]
 8002afc:	f012 0301 	ands.w	r3, r2, #1
 8002b00:	d00c      	beq.n	8002b1c <__swsetup_r+0xbc>
 8002b02:	2300      	movs	r3, #0
 8002b04:	60a3      	str	r3, [r4, #8]
 8002b06:	6963      	ldr	r3, [r4, #20]
 8002b08:	425b      	negs	r3, r3
 8002b0a:	61a3      	str	r3, [r4, #24]
 8002b0c:	6923      	ldr	r3, [r4, #16]
 8002b0e:	b953      	cbnz	r3, 8002b26 <__swsetup_r+0xc6>
 8002b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b18:	d1ba      	bne.n	8002a90 <__swsetup_r+0x30>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	0792      	lsls	r2, r2, #30
 8002b1e:	bf58      	it	pl
 8002b20:	6963      	ldrpl	r3, [r4, #20]
 8002b22:	60a3      	str	r3, [r4, #8]
 8002b24:	e7f2      	b.n	8002b0c <__swsetup_r+0xac>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e7f7      	b.n	8002b1a <__swsetup_r+0xba>
 8002b2a:	bf00      	nop
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	0800388c 	.word	0x0800388c
 8002b34:	080038ac 	.word	0x080038ac
 8002b38:	0800386c 	.word	0x0800386c

08002b3c <__sflush_r>:
 8002b3c:	898a      	ldrh	r2, [r1, #12]
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	4605      	mov	r5, r0
 8002b44:	0710      	lsls	r0, r2, #28
 8002b46:	460c      	mov	r4, r1
 8002b48:	d45a      	bmi.n	8002c00 <__sflush_r+0xc4>
 8002b4a:	684b      	ldr	r3, [r1, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	dc05      	bgt.n	8002b5c <__sflush_r+0x20>
 8002b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dc02      	bgt.n	8002b5c <__sflush_r+0x20>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b5e:	2e00      	cmp	r6, #0
 8002b60:	d0f9      	beq.n	8002b56 <__sflush_r+0x1a>
 8002b62:	2300      	movs	r3, #0
 8002b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b68:	682f      	ldr	r7, [r5, #0]
 8002b6a:	602b      	str	r3, [r5, #0]
 8002b6c:	d033      	beq.n	8002bd6 <__sflush_r+0x9a>
 8002b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	075a      	lsls	r2, r3, #29
 8002b74:	d505      	bpl.n	8002b82 <__sflush_r+0x46>
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	1ac0      	subs	r0, r0, r3
 8002b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b7c:	b10b      	cbz	r3, 8002b82 <__sflush_r+0x46>
 8002b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b80:	1ac0      	subs	r0, r0, r3
 8002b82:	2300      	movs	r3, #0
 8002b84:	4602      	mov	r2, r0
 8002b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b88:	6a21      	ldr	r1, [r4, #32]
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	47b0      	blx	r6
 8002b8e:	1c43      	adds	r3, r0, #1
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	d106      	bne.n	8002ba2 <__sflush_r+0x66>
 8002b94:	6829      	ldr	r1, [r5, #0]
 8002b96:	291d      	cmp	r1, #29
 8002b98:	d84b      	bhi.n	8002c32 <__sflush_r+0xf6>
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <__sflush_r+0x10c>)
 8002b9c:	40ca      	lsrs	r2, r1
 8002b9e:	07d6      	lsls	r6, r2, #31
 8002ba0:	d547      	bpl.n	8002c32 <__sflush_r+0xf6>
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	6062      	str	r2, [r4, #4]
 8002ba6:	04d9      	lsls	r1, r3, #19
 8002ba8:	6922      	ldr	r2, [r4, #16]
 8002baa:	6022      	str	r2, [r4, #0]
 8002bac:	d504      	bpl.n	8002bb8 <__sflush_r+0x7c>
 8002bae:	1c42      	adds	r2, r0, #1
 8002bb0:	d101      	bne.n	8002bb6 <__sflush_r+0x7a>
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	b903      	cbnz	r3, 8002bb8 <__sflush_r+0x7c>
 8002bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8002bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bba:	602f      	str	r7, [r5, #0]
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d0ca      	beq.n	8002b56 <__sflush_r+0x1a>
 8002bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bc4:	4299      	cmp	r1, r3
 8002bc6:	d002      	beq.n	8002bce <__sflush_r+0x92>
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 f997 	bl	8002efc <_free_r>
 8002bce:	2000      	movs	r0, #0
 8002bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8002bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd6:	6a21      	ldr	r1, [r4, #32]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	4628      	mov	r0, r5
 8002bdc:	47b0      	blx	r6
 8002bde:	1c41      	adds	r1, r0, #1
 8002be0:	d1c6      	bne.n	8002b70 <__sflush_r+0x34>
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0c3      	beq.n	8002b70 <__sflush_r+0x34>
 8002be8:	2b1d      	cmp	r3, #29
 8002bea:	d001      	beq.n	8002bf0 <__sflush_r+0xb4>
 8002bec:	2b16      	cmp	r3, #22
 8002bee:	d101      	bne.n	8002bf4 <__sflush_r+0xb8>
 8002bf0:	602f      	str	r7, [r5, #0]
 8002bf2:	e7b0      	b.n	8002b56 <__sflush_r+0x1a>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c00:	690f      	ldr	r7, [r1, #16]
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	d0a7      	beq.n	8002b56 <__sflush_r+0x1a>
 8002c06:	0793      	lsls	r3, r2, #30
 8002c08:	680e      	ldr	r6, [r1, #0]
 8002c0a:	bf08      	it	eq
 8002c0c:	694b      	ldreq	r3, [r1, #20]
 8002c0e:	600f      	str	r7, [r1, #0]
 8002c10:	bf18      	it	ne
 8002c12:	2300      	movne	r3, #0
 8002c14:	eba6 0807 	sub.w	r8, r6, r7
 8002c18:	608b      	str	r3, [r1, #8]
 8002c1a:	f1b8 0f00 	cmp.w	r8, #0
 8002c1e:	dd9a      	ble.n	8002b56 <__sflush_r+0x1a>
 8002c20:	4643      	mov	r3, r8
 8002c22:	463a      	mov	r2, r7
 8002c24:	6a21      	ldr	r1, [r4, #32]
 8002c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c28:	4628      	mov	r0, r5
 8002c2a:	47b0      	blx	r6
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	dc07      	bgt.n	8002c40 <__sflush_r+0x104>
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c40:	4407      	add	r7, r0
 8002c42:	eba8 0800 	sub.w	r8, r8, r0
 8002c46:	e7e8      	b.n	8002c1a <__sflush_r+0xde>
 8002c48:	20400001 	.word	0x20400001

08002c4c <_fflush_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	690b      	ldr	r3, [r1, #16]
 8002c50:	4605      	mov	r5, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	b1db      	cbz	r3, 8002c8e <_fflush_r+0x42>
 8002c56:	b118      	cbz	r0, 8002c60 <_fflush_r+0x14>
 8002c58:	6983      	ldr	r3, [r0, #24]
 8002c5a:	b90b      	cbnz	r3, 8002c60 <_fflush_r+0x14>
 8002c5c:	f000 f860 	bl	8002d20 <__sinit>
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <_fflush_r+0x48>)
 8002c62:	429c      	cmp	r4, r3
 8002c64:	d109      	bne.n	8002c7a <_fflush_r+0x2e>
 8002c66:	686c      	ldr	r4, [r5, #4]
 8002c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c6c:	b17b      	cbz	r3, 8002c8e <_fflush_r+0x42>
 8002c6e:	4621      	mov	r1, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c76:	f7ff bf61 	b.w	8002b3c <__sflush_r>
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <_fflush_r+0x4c>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	d101      	bne.n	8002c84 <_fflush_r+0x38>
 8002c80:	68ac      	ldr	r4, [r5, #8]
 8002c82:	e7f1      	b.n	8002c68 <_fflush_r+0x1c>
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <_fflush_r+0x50>)
 8002c86:	429c      	cmp	r4, r3
 8002c88:	bf08      	it	eq
 8002c8a:	68ec      	ldreq	r4, [r5, #12]
 8002c8c:	e7ec      	b.n	8002c68 <_fflush_r+0x1c>
 8002c8e:	2000      	movs	r0, #0
 8002c90:	bd38      	pop	{r3, r4, r5, pc}
 8002c92:	bf00      	nop
 8002c94:	0800388c 	.word	0x0800388c
 8002c98:	080038ac 	.word	0x080038ac
 8002c9c:	0800386c 	.word	0x0800386c

08002ca0 <_cleanup_r>:
 8002ca0:	4901      	ldr	r1, [pc, #4]	; (8002ca8 <_cleanup_r+0x8>)
 8002ca2:	f000 b8a9 	b.w	8002df8 <_fwalk_reent>
 8002ca6:	bf00      	nop
 8002ca8:	08002c4d 	.word	0x08002c4d

08002cac <std.isra.0>:
 8002cac:	2300      	movs	r3, #0
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	6003      	str	r3, [r0, #0]
 8002cb4:	6043      	str	r3, [r0, #4]
 8002cb6:	6083      	str	r3, [r0, #8]
 8002cb8:	8181      	strh	r1, [r0, #12]
 8002cba:	6643      	str	r3, [r0, #100]	; 0x64
 8002cbc:	81c2      	strh	r2, [r0, #14]
 8002cbe:	6103      	str	r3, [r0, #16]
 8002cc0:	6143      	str	r3, [r0, #20]
 8002cc2:	6183      	str	r3, [r0, #24]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	305c      	adds	r0, #92	; 0x5c
 8002cca:	f7ff fdeb 	bl	80028a4 <memset>
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <std.isra.0+0x38>)
 8002cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <std.isra.0+0x3c>)
 8002cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <std.isra.0+0x40>)
 8002cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <std.isra.0+0x44>)
 8002cdc:	6224      	str	r4, [r4, #32]
 8002cde:	6323      	str	r3, [r4, #48]	; 0x30
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08003621 	.word	0x08003621
 8002ce8:	08003643 	.word	0x08003643
 8002cec:	0800367b 	.word	0x0800367b
 8002cf0:	0800369f 	.word	0x0800369f

08002cf4 <__sfmoreglue>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	1e4a      	subs	r2, r1, #1
 8002cf8:	2568      	movs	r5, #104	; 0x68
 8002cfa:	4355      	muls	r5, r2
 8002cfc:	460e      	mov	r6, r1
 8002cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d02:	f000 f949 	bl	8002f98 <_malloc_r>
 8002d06:	4604      	mov	r4, r0
 8002d08:	b140      	cbz	r0, 8002d1c <__sfmoreglue+0x28>
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002d10:	300c      	adds	r0, #12
 8002d12:	60a0      	str	r0, [r4, #8]
 8002d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d18:	f7ff fdc4 	bl	80028a4 <memset>
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}

08002d20 <__sinit>:
 8002d20:	6983      	ldr	r3, [r0, #24]
 8002d22:	b510      	push	{r4, lr}
 8002d24:	4604      	mov	r4, r0
 8002d26:	bb33      	cbnz	r3, 8002d76 <__sinit+0x56>
 8002d28:	6483      	str	r3, [r0, #72]	; 0x48
 8002d2a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002d2c:	6503      	str	r3, [r0, #80]	; 0x50
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <__sinit+0x58>)
 8002d30:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <__sinit+0x5c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6282      	str	r2, [r0, #40]	; 0x28
 8002d36:	4298      	cmp	r0, r3
 8002d38:	bf04      	itt	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	6183      	streq	r3, [r0, #24]
 8002d3e:	f000 f81f 	bl	8002d80 <__sfp>
 8002d42:	6060      	str	r0, [r4, #4]
 8002d44:	4620      	mov	r0, r4
 8002d46:	f000 f81b 	bl	8002d80 <__sfp>
 8002d4a:	60a0      	str	r0, [r4, #8]
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 f817 	bl	8002d80 <__sfp>
 8002d52:	2200      	movs	r2, #0
 8002d54:	60e0      	str	r0, [r4, #12]
 8002d56:	2104      	movs	r1, #4
 8002d58:	6860      	ldr	r0, [r4, #4]
 8002d5a:	f7ff ffa7 	bl	8002cac <std.isra.0>
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2109      	movs	r1, #9
 8002d62:	68a0      	ldr	r0, [r4, #8]
 8002d64:	f7ff ffa2 	bl	8002cac <std.isra.0>
 8002d68:	2202      	movs	r2, #2
 8002d6a:	2112      	movs	r1, #18
 8002d6c:	68e0      	ldr	r0, [r4, #12]
 8002d6e:	f7ff ff9d 	bl	8002cac <std.isra.0>
 8002d72:	2301      	movs	r3, #1
 8002d74:	61a3      	str	r3, [r4, #24]
 8002d76:	bd10      	pop	{r4, pc}
 8002d78:	08003868 	.word	0x08003868
 8002d7c:	08002ca1 	.word	0x08002ca1

08002d80 <__sfp>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <__sfp+0x74>)
 8002d84:	681e      	ldr	r6, [r3, #0]
 8002d86:	69b3      	ldr	r3, [r6, #24]
 8002d88:	4607      	mov	r7, r0
 8002d8a:	b913      	cbnz	r3, 8002d92 <__sfp+0x12>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	f7ff ffc7 	bl	8002d20 <__sinit>
 8002d92:	3648      	adds	r6, #72	; 0x48
 8002d94:	68b4      	ldr	r4, [r6, #8]
 8002d96:	6873      	ldr	r3, [r6, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	d503      	bpl.n	8002da4 <__sfp+0x24>
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	b133      	cbz	r3, 8002dae <__sfp+0x2e>
 8002da0:	6836      	ldr	r6, [r6, #0]
 8002da2:	e7f7      	b.n	8002d94 <__sfp+0x14>
 8002da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002da8:	b16d      	cbz	r5, 8002dc6 <__sfp+0x46>
 8002daa:	3468      	adds	r4, #104	; 0x68
 8002dac:	e7f4      	b.n	8002d98 <__sfp+0x18>
 8002dae:	2104      	movs	r1, #4
 8002db0:	4638      	mov	r0, r7
 8002db2:	f7ff ff9f 	bl	8002cf4 <__sfmoreglue>
 8002db6:	6030      	str	r0, [r6, #0]
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d1f1      	bne.n	8002da0 <__sfp+0x20>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dca:	81e3      	strh	r3, [r4, #14]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	6665      	str	r5, [r4, #100]	; 0x64
 8002dd2:	6025      	str	r5, [r4, #0]
 8002dd4:	60a5      	str	r5, [r4, #8]
 8002dd6:	6065      	str	r5, [r4, #4]
 8002dd8:	6125      	str	r5, [r4, #16]
 8002dda:	6165      	str	r5, [r4, #20]
 8002ddc:	61a5      	str	r5, [r4, #24]
 8002dde:	2208      	movs	r2, #8
 8002de0:	4629      	mov	r1, r5
 8002de2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002de6:	f7ff fd5d 	bl	80028a4 <memset>
 8002dea:	6365      	str	r5, [r4, #52]	; 0x34
 8002dec:	63a5      	str	r5, [r4, #56]	; 0x38
 8002dee:	64a5      	str	r5, [r4, #72]	; 0x48
 8002df0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002df2:	e7e6      	b.n	8002dc2 <__sfp+0x42>
 8002df4:	08003868 	.word	0x08003868

08002df8 <_fwalk_reent>:
 8002df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dfc:	4680      	mov	r8, r0
 8002dfe:	4689      	mov	r9, r1
 8002e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e04:	2600      	movs	r6, #0
 8002e06:	b914      	cbnz	r4, 8002e0e <_fwalk_reent+0x16>
 8002e08:	4630      	mov	r0, r6
 8002e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e0e:	68a5      	ldr	r5, [r4, #8]
 8002e10:	6867      	ldr	r7, [r4, #4]
 8002e12:	3f01      	subs	r7, #1
 8002e14:	d501      	bpl.n	8002e1a <_fwalk_reent+0x22>
 8002e16:	6824      	ldr	r4, [r4, #0]
 8002e18:	e7f5      	b.n	8002e06 <_fwalk_reent+0xe>
 8002e1a:	89ab      	ldrh	r3, [r5, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d907      	bls.n	8002e30 <_fwalk_reent+0x38>
 8002e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e24:	3301      	adds	r3, #1
 8002e26:	d003      	beq.n	8002e30 <_fwalk_reent+0x38>
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	47c8      	blx	r9
 8002e2e:	4306      	orrs	r6, r0
 8002e30:	3568      	adds	r5, #104	; 0x68
 8002e32:	e7ee      	b.n	8002e12 <_fwalk_reent+0x1a>

08002e34 <__swhatbuf_r>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	460e      	mov	r6, r1
 8002e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	b090      	sub	sp, #64	; 0x40
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	da07      	bge.n	8002e56 <__swhatbuf_r+0x22>
 8002e46:	2300      	movs	r3, #0
 8002e48:	602b      	str	r3, [r5, #0]
 8002e4a:	89b3      	ldrh	r3, [r6, #12]
 8002e4c:	061a      	lsls	r2, r3, #24
 8002e4e:	d410      	bmi.n	8002e72 <__swhatbuf_r+0x3e>
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	e00e      	b.n	8002e74 <__swhatbuf_r+0x40>
 8002e56:	aa01      	add	r2, sp, #4
 8002e58:	f000 fc48 	bl	80036ec <_fstat_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	dbf2      	blt.n	8002e46 <__swhatbuf_r+0x12>
 8002e60:	9a02      	ldr	r2, [sp, #8]
 8002e62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e6a:	425a      	negs	r2, r3
 8002e6c:	415a      	adcs	r2, r3
 8002e6e:	602a      	str	r2, [r5, #0]
 8002e70:	e7ee      	b.n	8002e50 <__swhatbuf_r+0x1c>
 8002e72:	2340      	movs	r3, #64	; 0x40
 8002e74:	2000      	movs	r0, #0
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	b010      	add	sp, #64	; 0x40
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}

08002e7c <__smakebuf_r>:
 8002e7c:	898b      	ldrh	r3, [r1, #12]
 8002e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e80:	079d      	lsls	r5, r3, #30
 8002e82:	4606      	mov	r6, r0
 8002e84:	460c      	mov	r4, r1
 8002e86:	d507      	bpl.n	8002e98 <__smakebuf_r+0x1c>
 8002e88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	6123      	str	r3, [r4, #16]
 8002e90:	2301      	movs	r3, #1
 8002e92:	6163      	str	r3, [r4, #20]
 8002e94:	b002      	add	sp, #8
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	ab01      	add	r3, sp, #4
 8002e9a:	466a      	mov	r2, sp
 8002e9c:	f7ff ffca 	bl	8002e34 <__swhatbuf_r>
 8002ea0:	9900      	ldr	r1, [sp, #0]
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	f000 f877 	bl	8002f98 <_malloc_r>
 8002eaa:	b948      	cbnz	r0, 8002ec0 <__smakebuf_r+0x44>
 8002eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb0:	059a      	lsls	r2, r3, #22
 8002eb2:	d4ef      	bmi.n	8002e94 <__smakebuf_r+0x18>
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	e7e3      	b.n	8002e88 <__smakebuf_r+0xc>
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <__smakebuf_r+0x7c>)
 8002ec2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	6020      	str	r0, [r4, #0]
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	9b00      	ldr	r3, [sp, #0]
 8002ed0:	6163      	str	r3, [r4, #20]
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	6120      	str	r0, [r4, #16]
 8002ed6:	b15b      	cbz	r3, 8002ef0 <__smakebuf_r+0x74>
 8002ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002edc:	4630      	mov	r0, r6
 8002ede:	f000 fc17 	bl	8003710 <_isatty_r>
 8002ee2:	b128      	cbz	r0, 8002ef0 <__smakebuf_r+0x74>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	81a3      	strh	r3, [r4, #12]
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	431d      	orrs	r5, r3
 8002ef4:	81a5      	strh	r5, [r4, #12]
 8002ef6:	e7cd      	b.n	8002e94 <__smakebuf_r+0x18>
 8002ef8:	08002ca1 	.word	0x08002ca1

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d045      	beq.n	8002f90 <_free_r+0x94>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 fc20 	bl	8003754 <__malloc_lock>
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <_free_r+0x98>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	b933      	cbnz	r3, 8002f2a <_free_r+0x2e>
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6014      	str	r4, [r2, #0]
 8002f20:	4628      	mov	r0, r5
 8002f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f26:	f000 bc16 	b.w	8003756 <__malloc_unlock>
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d90c      	bls.n	8002f48 <_free_r+0x4c>
 8002f2e:	6821      	ldr	r1, [r4, #0]
 8002f30:	1862      	adds	r2, r4, r1
 8002f32:	4293      	cmp	r3, r2
 8002f34:	bf04      	itt	eq
 8002f36:	681a      	ldreq	r2, [r3, #0]
 8002f38:	685b      	ldreq	r3, [r3, #4]
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	bf04      	itt	eq
 8002f3e:	1852      	addeq	r2, r2, r1
 8002f40:	6022      	streq	r2, [r4, #0]
 8002f42:	6004      	str	r4, [r0, #0]
 8002f44:	e7ec      	b.n	8002f20 <_free_r+0x24>
 8002f46:	4613      	mov	r3, r2
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	b10a      	cbz	r2, 8002f50 <_free_r+0x54>
 8002f4c:	42a2      	cmp	r2, r4
 8002f4e:	d9fa      	bls.n	8002f46 <_free_r+0x4a>
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	1858      	adds	r0, r3, r1
 8002f54:	42a0      	cmp	r0, r4
 8002f56:	d10b      	bne.n	8002f70 <_free_r+0x74>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	4401      	add	r1, r0
 8002f5c:	1858      	adds	r0, r3, r1
 8002f5e:	4282      	cmp	r2, r0
 8002f60:	6019      	str	r1, [r3, #0]
 8002f62:	d1dd      	bne.n	8002f20 <_free_r+0x24>
 8002f64:	6810      	ldr	r0, [r2, #0]
 8002f66:	6852      	ldr	r2, [r2, #4]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	4401      	add	r1, r0
 8002f6c:	6019      	str	r1, [r3, #0]
 8002f6e:	e7d7      	b.n	8002f20 <_free_r+0x24>
 8002f70:	d902      	bls.n	8002f78 <_free_r+0x7c>
 8002f72:	230c      	movs	r3, #12
 8002f74:	602b      	str	r3, [r5, #0]
 8002f76:	e7d3      	b.n	8002f20 <_free_r+0x24>
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	1821      	adds	r1, r4, r0
 8002f7c:	428a      	cmp	r2, r1
 8002f7e:	bf04      	itt	eq
 8002f80:	6811      	ldreq	r1, [r2, #0]
 8002f82:	6852      	ldreq	r2, [r2, #4]
 8002f84:	6062      	str	r2, [r4, #4]
 8002f86:	bf04      	itt	eq
 8002f88:	1809      	addeq	r1, r1, r0
 8002f8a:	6021      	streq	r1, [r4, #0]
 8002f8c:	605c      	str	r4, [r3, #4]
 8002f8e:	e7c7      	b.n	8002f20 <_free_r+0x24>
 8002f90:	bd38      	pop	{r3, r4, r5, pc}
 8002f92:	bf00      	nop
 8002f94:	20000088 	.word	0x20000088

08002f98 <_malloc_r>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	1ccd      	adds	r5, r1, #3
 8002f9c:	f025 0503 	bic.w	r5, r5, #3
 8002fa0:	3508      	adds	r5, #8
 8002fa2:	2d0c      	cmp	r5, #12
 8002fa4:	bf38      	it	cc
 8002fa6:	250c      	movcc	r5, #12
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	4606      	mov	r6, r0
 8002fac:	db01      	blt.n	8002fb2 <_malloc_r+0x1a>
 8002fae:	42a9      	cmp	r1, r5
 8002fb0:	d903      	bls.n	8002fba <_malloc_r+0x22>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
 8002fba:	f000 fbcb 	bl	8003754 <__malloc_lock>
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <_malloc_r+0xb4>)
 8002fc0:	6814      	ldr	r4, [r2, #0]
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	b991      	cbnz	r1, 8002fec <_malloc_r+0x54>
 8002fc6:	4c22      	ldr	r4, [pc, #136]	; (8003050 <_malloc_r+0xb8>)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b91b      	cbnz	r3, 8002fd4 <_malloc_r+0x3c>
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 fb17 	bl	8003600 <_sbrk_r>
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f000 fb12 	bl	8003600 <_sbrk_r>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d126      	bne.n	800302e <_malloc_r+0x96>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	6033      	str	r3, [r6, #0]
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f000 fbb6 	bl	8003756 <__malloc_unlock>
 8002fea:	e7e4      	b.n	8002fb6 <_malloc_r+0x1e>
 8002fec:	680b      	ldr	r3, [r1, #0]
 8002fee:	1b5b      	subs	r3, r3, r5
 8002ff0:	d41a      	bmi.n	8003028 <_malloc_r+0x90>
 8002ff2:	2b0b      	cmp	r3, #11
 8002ff4:	d90f      	bls.n	8003016 <_malloc_r+0x7e>
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	50cd      	str	r5, [r1, r3]
 8002ffa:	18cc      	adds	r4, r1, r3
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f000 fbaa 	bl	8003756 <__malloc_unlock>
 8003002:	f104 000b 	add.w	r0, r4, #11
 8003006:	1d23      	adds	r3, r4, #4
 8003008:	f020 0007 	bic.w	r0, r0, #7
 800300c:	1ac3      	subs	r3, r0, r3
 800300e:	d01b      	beq.n	8003048 <_malloc_r+0xb0>
 8003010:	425a      	negs	r2, r3
 8003012:	50e2      	str	r2, [r4, r3]
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	428c      	cmp	r4, r1
 8003018:	bf0d      	iteet	eq
 800301a:	6863      	ldreq	r3, [r4, #4]
 800301c:	684b      	ldrne	r3, [r1, #4]
 800301e:	6063      	strne	r3, [r4, #4]
 8003020:	6013      	streq	r3, [r2, #0]
 8003022:	bf18      	it	ne
 8003024:	460c      	movne	r4, r1
 8003026:	e7e9      	b.n	8002ffc <_malloc_r+0x64>
 8003028:	460c      	mov	r4, r1
 800302a:	6849      	ldr	r1, [r1, #4]
 800302c:	e7ca      	b.n	8002fc4 <_malloc_r+0x2c>
 800302e:	1cc4      	adds	r4, r0, #3
 8003030:	f024 0403 	bic.w	r4, r4, #3
 8003034:	42a0      	cmp	r0, r4
 8003036:	d005      	beq.n	8003044 <_malloc_r+0xac>
 8003038:	1a21      	subs	r1, r4, r0
 800303a:	4630      	mov	r0, r6
 800303c:	f000 fae0 	bl	8003600 <_sbrk_r>
 8003040:	3001      	adds	r0, #1
 8003042:	d0cd      	beq.n	8002fe0 <_malloc_r+0x48>
 8003044:	6025      	str	r5, [r4, #0]
 8003046:	e7d9      	b.n	8002ffc <_malloc_r+0x64>
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	bf00      	nop
 800304c:	20000088 	.word	0x20000088
 8003050:	2000008c 	.word	0x2000008c

08003054 <__sfputc_r>:
 8003054:	6893      	ldr	r3, [r2, #8]
 8003056:	3b01      	subs	r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	b410      	push	{r4}
 800305c:	6093      	str	r3, [r2, #8]
 800305e:	da09      	bge.n	8003074 <__sfputc_r+0x20>
 8003060:	6994      	ldr	r4, [r2, #24]
 8003062:	42a3      	cmp	r3, r4
 8003064:	db02      	blt.n	800306c <__sfputc_r+0x18>
 8003066:	b2cb      	uxtb	r3, r1
 8003068:	2b0a      	cmp	r3, #10
 800306a:	d103      	bne.n	8003074 <__sfputc_r+0x20>
 800306c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003070:	f7ff bca4 	b.w	80029bc <__swbuf_r>
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	1c58      	adds	r0, r3, #1
 8003078:	6010      	str	r0, [r2, #0]
 800307a:	7019      	strb	r1, [r3, #0]
 800307c:	b2c8      	uxtb	r0, r1
 800307e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003082:	4770      	bx	lr

08003084 <__sfputs_r>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	4606      	mov	r6, r0
 8003088:	460f      	mov	r7, r1
 800308a:	4614      	mov	r4, r2
 800308c:	18d5      	adds	r5, r2, r3
 800308e:	42ac      	cmp	r4, r5
 8003090:	d101      	bne.n	8003096 <__sfputs_r+0x12>
 8003092:	2000      	movs	r0, #0
 8003094:	e007      	b.n	80030a6 <__sfputs_r+0x22>
 8003096:	463a      	mov	r2, r7
 8003098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800309c:	4630      	mov	r0, r6
 800309e:	f7ff ffd9 	bl	8003054 <__sfputc_r>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d1f3      	bne.n	800308e <__sfputs_r+0xa>
 80030a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030a8 <_vfiprintf_r>:
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	b09d      	sub	sp, #116	; 0x74
 80030ae:	460c      	mov	r4, r1
 80030b0:	4617      	mov	r7, r2
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	4606      	mov	r6, r0
 80030b6:	b118      	cbz	r0, 80030c0 <_vfiprintf_r+0x18>
 80030b8:	6983      	ldr	r3, [r0, #24]
 80030ba:	b90b      	cbnz	r3, 80030c0 <_vfiprintf_r+0x18>
 80030bc:	f7ff fe30 	bl	8002d20 <__sinit>
 80030c0:	4b7c      	ldr	r3, [pc, #496]	; (80032b4 <_vfiprintf_r+0x20c>)
 80030c2:	429c      	cmp	r4, r3
 80030c4:	d157      	bne.n	8003176 <_vfiprintf_r+0xce>
 80030c6:	6874      	ldr	r4, [r6, #4]
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	0718      	lsls	r0, r3, #28
 80030cc:	d55d      	bpl.n	800318a <_vfiprintf_r+0xe2>
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05a      	beq.n	800318a <_vfiprintf_r+0xe2>
 80030d4:	2300      	movs	r3, #0
 80030d6:	9309      	str	r3, [sp, #36]	; 0x24
 80030d8:	2320      	movs	r3, #32
 80030da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030de:	2330      	movs	r3, #48	; 0x30
 80030e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e4:	f04f 0b01 	mov.w	fp, #1
 80030e8:	46b8      	mov	r8, r7
 80030ea:	4645      	mov	r5, r8
 80030ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d155      	bne.n	80031a0 <_vfiprintf_r+0xf8>
 80030f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80030f8:	d00b      	beq.n	8003112 <_vfiprintf_r+0x6a>
 80030fa:	4653      	mov	r3, sl
 80030fc:	463a      	mov	r2, r7
 80030fe:	4621      	mov	r1, r4
 8003100:	4630      	mov	r0, r6
 8003102:	f7ff ffbf 	bl	8003084 <__sfputs_r>
 8003106:	3001      	adds	r0, #1
 8003108:	f000 80c4 	beq.w	8003294 <_vfiprintf_r+0x1ec>
 800310c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800310e:	4453      	add	r3, sl
 8003110:	9309      	str	r3, [sp, #36]	; 0x24
 8003112:	f898 3000 	ldrb.w	r3, [r8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80bc 	beq.w	8003294 <_vfiprintf_r+0x1ec>
 800311c:	2300      	movs	r3, #0
 800311e:	f04f 32ff 	mov.w	r2, #4294967295
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	9307      	str	r3, [sp, #28]
 8003126:	9205      	str	r2, [sp, #20]
 8003128:	9306      	str	r3, [sp, #24]
 800312a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800312e:	931a      	str	r3, [sp, #104]	; 0x68
 8003130:	2205      	movs	r2, #5
 8003132:	7829      	ldrb	r1, [r5, #0]
 8003134:	4860      	ldr	r0, [pc, #384]	; (80032b8 <_vfiprintf_r+0x210>)
 8003136:	f7fd f84b 	bl	80001d0 <memchr>
 800313a:	f105 0801 	add.w	r8, r5, #1
 800313e:	9b04      	ldr	r3, [sp, #16]
 8003140:	2800      	cmp	r0, #0
 8003142:	d131      	bne.n	80031a8 <_vfiprintf_r+0x100>
 8003144:	06d9      	lsls	r1, r3, #27
 8003146:	bf44      	itt	mi
 8003148:	2220      	movmi	r2, #32
 800314a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800314e:	071a      	lsls	r2, r3, #28
 8003150:	bf44      	itt	mi
 8003152:	222b      	movmi	r2, #43	; 0x2b
 8003154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003158:	782a      	ldrb	r2, [r5, #0]
 800315a:	2a2a      	cmp	r2, #42	; 0x2a
 800315c:	d02c      	beq.n	80031b8 <_vfiprintf_r+0x110>
 800315e:	9a07      	ldr	r2, [sp, #28]
 8003160:	2100      	movs	r1, #0
 8003162:	200a      	movs	r0, #10
 8003164:	46a8      	mov	r8, r5
 8003166:	3501      	adds	r5, #1
 8003168:	f898 3000 	ldrb.w	r3, [r8]
 800316c:	3b30      	subs	r3, #48	; 0x30
 800316e:	2b09      	cmp	r3, #9
 8003170:	d96d      	bls.n	800324e <_vfiprintf_r+0x1a6>
 8003172:	b371      	cbz	r1, 80031d2 <_vfiprintf_r+0x12a>
 8003174:	e026      	b.n	80031c4 <_vfiprintf_r+0x11c>
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <_vfiprintf_r+0x214>)
 8003178:	429c      	cmp	r4, r3
 800317a:	d101      	bne.n	8003180 <_vfiprintf_r+0xd8>
 800317c:	68b4      	ldr	r4, [r6, #8]
 800317e:	e7a3      	b.n	80030c8 <_vfiprintf_r+0x20>
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <_vfiprintf_r+0x218>)
 8003182:	429c      	cmp	r4, r3
 8003184:	bf08      	it	eq
 8003186:	68f4      	ldreq	r4, [r6, #12]
 8003188:	e79e      	b.n	80030c8 <_vfiprintf_r+0x20>
 800318a:	4621      	mov	r1, r4
 800318c:	4630      	mov	r0, r6
 800318e:	f7ff fc67 	bl	8002a60 <__swsetup_r>
 8003192:	2800      	cmp	r0, #0
 8003194:	d09e      	beq.n	80030d4 <_vfiprintf_r+0x2c>
 8003196:	f04f 30ff 	mov.w	r0, #4294967295
 800319a:	b01d      	add	sp, #116	; 0x74
 800319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a0:	2b25      	cmp	r3, #37	; 0x25
 80031a2:	d0a7      	beq.n	80030f4 <_vfiprintf_r+0x4c>
 80031a4:	46a8      	mov	r8, r5
 80031a6:	e7a0      	b.n	80030ea <_vfiprintf_r+0x42>
 80031a8:	4a43      	ldr	r2, [pc, #268]	; (80032b8 <_vfiprintf_r+0x210>)
 80031aa:	1a80      	subs	r0, r0, r2
 80031ac:	fa0b f000 	lsl.w	r0, fp, r0
 80031b0:	4318      	orrs	r0, r3
 80031b2:	9004      	str	r0, [sp, #16]
 80031b4:	4645      	mov	r5, r8
 80031b6:	e7bb      	b.n	8003130 <_vfiprintf_r+0x88>
 80031b8:	9a03      	ldr	r2, [sp, #12]
 80031ba:	1d11      	adds	r1, r2, #4
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	9103      	str	r1, [sp, #12]
 80031c0:	2a00      	cmp	r2, #0
 80031c2:	db01      	blt.n	80031c8 <_vfiprintf_r+0x120>
 80031c4:	9207      	str	r2, [sp, #28]
 80031c6:	e004      	b.n	80031d2 <_vfiprintf_r+0x12a>
 80031c8:	4252      	negs	r2, r2
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	9207      	str	r2, [sp, #28]
 80031d0:	9304      	str	r3, [sp, #16]
 80031d2:	f898 3000 	ldrb.w	r3, [r8]
 80031d6:	2b2e      	cmp	r3, #46	; 0x2e
 80031d8:	d110      	bne.n	80031fc <_vfiprintf_r+0x154>
 80031da:	f898 3001 	ldrb.w	r3, [r8, #1]
 80031de:	2b2a      	cmp	r3, #42	; 0x2a
 80031e0:	f108 0101 	add.w	r1, r8, #1
 80031e4:	d137      	bne.n	8003256 <_vfiprintf_r+0x1ae>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	1d1a      	adds	r2, r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	9203      	str	r2, [sp, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfb8      	it	lt
 80031f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f6:	f108 0802 	add.w	r8, r8, #2
 80031fa:	9305      	str	r3, [sp, #20]
 80031fc:	4d31      	ldr	r5, [pc, #196]	; (80032c4 <_vfiprintf_r+0x21c>)
 80031fe:	f898 1000 	ldrb.w	r1, [r8]
 8003202:	2203      	movs	r2, #3
 8003204:	4628      	mov	r0, r5
 8003206:	f7fc ffe3 	bl	80001d0 <memchr>
 800320a:	b140      	cbz	r0, 800321e <_vfiprintf_r+0x176>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	1b40      	subs	r0, r0, r5
 8003210:	fa03 f000 	lsl.w	r0, r3, r0
 8003214:	9b04      	ldr	r3, [sp, #16]
 8003216:	4303      	orrs	r3, r0
 8003218:	9304      	str	r3, [sp, #16]
 800321a:	f108 0801 	add.w	r8, r8, #1
 800321e:	f898 1000 	ldrb.w	r1, [r8]
 8003222:	4829      	ldr	r0, [pc, #164]	; (80032c8 <_vfiprintf_r+0x220>)
 8003224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003228:	2206      	movs	r2, #6
 800322a:	f108 0701 	add.w	r7, r8, #1
 800322e:	f7fc ffcf 	bl	80001d0 <memchr>
 8003232:	2800      	cmp	r0, #0
 8003234:	d034      	beq.n	80032a0 <_vfiprintf_r+0x1f8>
 8003236:	4b25      	ldr	r3, [pc, #148]	; (80032cc <_vfiprintf_r+0x224>)
 8003238:	bb03      	cbnz	r3, 800327c <_vfiprintf_r+0x1d4>
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	3307      	adds	r3, #7
 800323e:	f023 0307 	bic.w	r3, r3, #7
 8003242:	3308      	adds	r3, #8
 8003244:	9303      	str	r3, [sp, #12]
 8003246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003248:	444b      	add	r3, r9
 800324a:	9309      	str	r3, [sp, #36]	; 0x24
 800324c:	e74c      	b.n	80030e8 <_vfiprintf_r+0x40>
 800324e:	fb00 3202 	mla	r2, r0, r2, r3
 8003252:	2101      	movs	r1, #1
 8003254:	e786      	b.n	8003164 <_vfiprintf_r+0xbc>
 8003256:	2300      	movs	r3, #0
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	4618      	mov	r0, r3
 800325c:	250a      	movs	r5, #10
 800325e:	4688      	mov	r8, r1
 8003260:	3101      	adds	r1, #1
 8003262:	f898 2000 	ldrb.w	r2, [r8]
 8003266:	3a30      	subs	r2, #48	; 0x30
 8003268:	2a09      	cmp	r2, #9
 800326a:	d903      	bls.n	8003274 <_vfiprintf_r+0x1cc>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0c5      	beq.n	80031fc <_vfiprintf_r+0x154>
 8003270:	9005      	str	r0, [sp, #20]
 8003272:	e7c3      	b.n	80031fc <_vfiprintf_r+0x154>
 8003274:	fb05 2000 	mla	r0, r5, r0, r2
 8003278:	2301      	movs	r3, #1
 800327a:	e7f0      	b.n	800325e <_vfiprintf_r+0x1b6>
 800327c:	ab03      	add	r3, sp, #12
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4622      	mov	r2, r4
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_vfiprintf_r+0x228>)
 8003284:	a904      	add	r1, sp, #16
 8003286:	4630      	mov	r0, r6
 8003288:	f3af 8000 	nop.w
 800328c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003290:	4681      	mov	r9, r0
 8003292:	d1d8      	bne.n	8003246 <_vfiprintf_r+0x19e>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	065b      	lsls	r3, r3, #25
 8003298:	f53f af7d 	bmi.w	8003196 <_vfiprintf_r+0xee>
 800329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329e:	e77c      	b.n	800319a <_vfiprintf_r+0xf2>
 80032a0:	ab03      	add	r3, sp, #12
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4622      	mov	r2, r4
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <_vfiprintf_r+0x228>)
 80032a8:	a904      	add	r1, sp, #16
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 f888 	bl	80033c0 <_printf_i>
 80032b0:	e7ec      	b.n	800328c <_vfiprintf_r+0x1e4>
 80032b2:	bf00      	nop
 80032b4:	0800388c 	.word	0x0800388c
 80032b8:	080038cc 	.word	0x080038cc
 80032bc:	080038ac 	.word	0x080038ac
 80032c0:	0800386c 	.word	0x0800386c
 80032c4:	080038d2 	.word	0x080038d2
 80032c8:	080038d6 	.word	0x080038d6
 80032cc:	00000000 	.word	0x00000000
 80032d0:	08003085 	.word	0x08003085

080032d4 <_printf_common>:
 80032d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d8:	4691      	mov	r9, r2
 80032da:	461f      	mov	r7, r3
 80032dc:	688a      	ldr	r2, [r1, #8]
 80032de:	690b      	ldr	r3, [r1, #16]
 80032e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bfb8      	it	lt
 80032e8:	4613      	movlt	r3, r2
 80032ea:	f8c9 3000 	str.w	r3, [r9]
 80032ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f2:	4606      	mov	r6, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	b112      	cbz	r2, 80032fe <_printf_common+0x2a>
 80032f8:	3301      	adds	r3, #1
 80032fa:	f8c9 3000 	str.w	r3, [r9]
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	0699      	lsls	r1, r3, #26
 8003302:	bf42      	ittt	mi
 8003304:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003308:	3302      	addmi	r3, #2
 800330a:	f8c9 3000 	strmi.w	r3, [r9]
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f015 0506 	ands.w	r5, r5, #6
 8003314:	d107      	bne.n	8003326 <_printf_common+0x52>
 8003316:	f104 0a19 	add.w	sl, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	f8d9 2000 	ldr.w	r2, [r9]
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	429d      	cmp	r5, r3
 8003324:	db29      	blt.n	800337a <_printf_common+0xa6>
 8003326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	3300      	adds	r3, #0
 800332e:	bf18      	it	ne
 8003330:	2301      	movne	r3, #1
 8003332:	0692      	lsls	r2, r2, #26
 8003334:	d42e      	bmi.n	8003394 <_printf_common+0xc0>
 8003336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800333a:	4639      	mov	r1, r7
 800333c:	4630      	mov	r0, r6
 800333e:	47c0      	blx	r8
 8003340:	3001      	adds	r0, #1
 8003342:	d021      	beq.n	8003388 <_printf_common+0xb4>
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	68e5      	ldr	r5, [r4, #12]
 8003348:	f8d9 2000 	ldr.w	r2, [r9]
 800334c:	f003 0306 	and.w	r3, r3, #6
 8003350:	2b04      	cmp	r3, #4
 8003352:	bf08      	it	eq
 8003354:	1aad      	subeq	r5, r5, r2
 8003356:	68a3      	ldr	r3, [r4, #8]
 8003358:	6922      	ldr	r2, [r4, #16]
 800335a:	bf0c      	ite	eq
 800335c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003360:	2500      	movne	r5, #0
 8003362:	4293      	cmp	r3, r2
 8003364:	bfc4      	itt	gt
 8003366:	1a9b      	subgt	r3, r3, r2
 8003368:	18ed      	addgt	r5, r5, r3
 800336a:	f04f 0900 	mov.w	r9, #0
 800336e:	341a      	adds	r4, #26
 8003370:	454d      	cmp	r5, r9
 8003372:	d11b      	bne.n	80033ac <_printf_common+0xd8>
 8003374:	2000      	movs	r0, #0
 8003376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337a:	2301      	movs	r3, #1
 800337c:	4652      	mov	r2, sl
 800337e:	4639      	mov	r1, r7
 8003380:	4630      	mov	r0, r6
 8003382:	47c0      	blx	r8
 8003384:	3001      	adds	r0, #1
 8003386:	d103      	bne.n	8003390 <_printf_common+0xbc>
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003390:	3501      	adds	r5, #1
 8003392:	e7c2      	b.n	800331a <_printf_common+0x46>
 8003394:	18e1      	adds	r1, r4, r3
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	2030      	movs	r0, #48	; 0x30
 800339a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800339e:	4422      	add	r2, r4
 80033a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033a8:	3302      	adds	r3, #2
 80033aa:	e7c4      	b.n	8003336 <_printf_common+0x62>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4622      	mov	r2, r4
 80033b0:	4639      	mov	r1, r7
 80033b2:	4630      	mov	r0, r6
 80033b4:	47c0      	blx	r8
 80033b6:	3001      	adds	r0, #1
 80033b8:	d0e6      	beq.n	8003388 <_printf_common+0xb4>
 80033ba:	f109 0901 	add.w	r9, r9, #1
 80033be:	e7d7      	b.n	8003370 <_printf_common+0x9c>

080033c0 <_printf_i>:
 80033c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c4:	4617      	mov	r7, r2
 80033c6:	7e0a      	ldrb	r2, [r1, #24]
 80033c8:	b085      	sub	sp, #20
 80033ca:	2a6e      	cmp	r2, #110	; 0x6e
 80033cc:	4698      	mov	r8, r3
 80033ce:	4606      	mov	r6, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033d8:	f000 80bc 	beq.w	8003554 <_printf_i+0x194>
 80033dc:	d81a      	bhi.n	8003414 <_printf_i+0x54>
 80033de:	2a63      	cmp	r2, #99	; 0x63
 80033e0:	d02e      	beq.n	8003440 <_printf_i+0x80>
 80033e2:	d80a      	bhi.n	80033fa <_printf_i+0x3a>
 80033e4:	2a00      	cmp	r2, #0
 80033e6:	f000 80c8 	beq.w	800357a <_printf_i+0x1ba>
 80033ea:	2a58      	cmp	r2, #88	; 0x58
 80033ec:	f000 808a 	beq.w	8003504 <_printf_i+0x144>
 80033f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033f8:	e02a      	b.n	8003450 <_printf_i+0x90>
 80033fa:	2a64      	cmp	r2, #100	; 0x64
 80033fc:	d001      	beq.n	8003402 <_printf_i+0x42>
 80033fe:	2a69      	cmp	r2, #105	; 0x69
 8003400:	d1f6      	bne.n	80033f0 <_printf_i+0x30>
 8003402:	6821      	ldr	r1, [r4, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f011 0f80 	tst.w	r1, #128	; 0x80
 800340a:	d023      	beq.n	8003454 <_printf_i+0x94>
 800340c:	1d11      	adds	r1, r2, #4
 800340e:	6019      	str	r1, [r3, #0]
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	e027      	b.n	8003464 <_printf_i+0xa4>
 8003414:	2a73      	cmp	r2, #115	; 0x73
 8003416:	f000 80b4 	beq.w	8003582 <_printf_i+0x1c2>
 800341a:	d808      	bhi.n	800342e <_printf_i+0x6e>
 800341c:	2a6f      	cmp	r2, #111	; 0x6f
 800341e:	d02a      	beq.n	8003476 <_printf_i+0xb6>
 8003420:	2a70      	cmp	r2, #112	; 0x70
 8003422:	d1e5      	bne.n	80033f0 <_printf_i+0x30>
 8003424:	680a      	ldr	r2, [r1, #0]
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	600a      	str	r2, [r1, #0]
 800342c:	e003      	b.n	8003436 <_printf_i+0x76>
 800342e:	2a75      	cmp	r2, #117	; 0x75
 8003430:	d021      	beq.n	8003476 <_printf_i+0xb6>
 8003432:	2a78      	cmp	r2, #120	; 0x78
 8003434:	d1dc      	bne.n	80033f0 <_printf_i+0x30>
 8003436:	2278      	movs	r2, #120	; 0x78
 8003438:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800343c:	496e      	ldr	r1, [pc, #440]	; (80035f8 <_printf_i+0x238>)
 800343e:	e064      	b.n	800350a <_printf_i+0x14a>
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003446:	1d11      	adds	r1, r2, #4
 8003448:	6019      	str	r1, [r3, #0]
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003450:	2301      	movs	r3, #1
 8003452:	e0a3      	b.n	800359c <_printf_i+0x1dc>
 8003454:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003458:	f102 0104 	add.w	r1, r2, #4
 800345c:	6019      	str	r1, [r3, #0]
 800345e:	d0d7      	beq.n	8003410 <_printf_i+0x50>
 8003460:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003464:	2b00      	cmp	r3, #0
 8003466:	da03      	bge.n	8003470 <_printf_i+0xb0>
 8003468:	222d      	movs	r2, #45	; 0x2d
 800346a:	425b      	negs	r3, r3
 800346c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003470:	4962      	ldr	r1, [pc, #392]	; (80035fc <_printf_i+0x23c>)
 8003472:	220a      	movs	r2, #10
 8003474:	e017      	b.n	80034a6 <_printf_i+0xe6>
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800347e:	d003      	beq.n	8003488 <_printf_i+0xc8>
 8003480:	1d08      	adds	r0, r1, #4
 8003482:	6018      	str	r0, [r3, #0]
 8003484:	680b      	ldr	r3, [r1, #0]
 8003486:	e006      	b.n	8003496 <_printf_i+0xd6>
 8003488:	f010 0f40 	tst.w	r0, #64	; 0x40
 800348c:	f101 0004 	add.w	r0, r1, #4
 8003490:	6018      	str	r0, [r3, #0]
 8003492:	d0f7      	beq.n	8003484 <_printf_i+0xc4>
 8003494:	880b      	ldrh	r3, [r1, #0]
 8003496:	4959      	ldr	r1, [pc, #356]	; (80035fc <_printf_i+0x23c>)
 8003498:	2a6f      	cmp	r2, #111	; 0x6f
 800349a:	bf14      	ite	ne
 800349c:	220a      	movne	r2, #10
 800349e:	2208      	moveq	r2, #8
 80034a0:	2000      	movs	r0, #0
 80034a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034a6:	6865      	ldr	r5, [r4, #4]
 80034a8:	60a5      	str	r5, [r4, #8]
 80034aa:	2d00      	cmp	r5, #0
 80034ac:	f2c0 809c 	blt.w	80035e8 <_printf_i+0x228>
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	f020 0004 	bic.w	r0, r0, #4
 80034b6:	6020      	str	r0, [r4, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d13f      	bne.n	800353c <_printf_i+0x17c>
 80034bc:	2d00      	cmp	r5, #0
 80034be:	f040 8095 	bne.w	80035ec <_printf_i+0x22c>
 80034c2:	4675      	mov	r5, lr
 80034c4:	2a08      	cmp	r2, #8
 80034c6:	d10b      	bne.n	80034e0 <_printf_i+0x120>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	07da      	lsls	r2, r3, #31
 80034cc:	d508      	bpl.n	80034e0 <_printf_i+0x120>
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	bfde      	ittt	le
 80034d6:	2330      	movle	r3, #48	; 0x30
 80034d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034e0:	ebae 0305 	sub.w	r3, lr, r5
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	f8cd 8000 	str.w	r8, [sp]
 80034ea:	463b      	mov	r3, r7
 80034ec:	aa03      	add	r2, sp, #12
 80034ee:	4621      	mov	r1, r4
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7ff feef 	bl	80032d4 <_printf_common>
 80034f6:	3001      	adds	r0, #1
 80034f8:	d155      	bne.n	80035a6 <_printf_i+0x1e6>
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	b005      	add	sp, #20
 8003500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003504:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003508:	493c      	ldr	r1, [pc, #240]	; (80035fc <_printf_i+0x23c>)
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003512:	f100 0504 	add.w	r5, r0, #4
 8003516:	601d      	str	r5, [r3, #0]
 8003518:	d001      	beq.n	800351e <_printf_i+0x15e>
 800351a:	6803      	ldr	r3, [r0, #0]
 800351c:	e002      	b.n	8003524 <_printf_i+0x164>
 800351e:	0655      	lsls	r5, r2, #25
 8003520:	d5fb      	bpl.n	800351a <_printf_i+0x15a>
 8003522:	8803      	ldrh	r3, [r0, #0]
 8003524:	07d0      	lsls	r0, r2, #31
 8003526:	bf44      	itt	mi
 8003528:	f042 0220 	orrmi.w	r2, r2, #32
 800352c:	6022      	strmi	r2, [r4, #0]
 800352e:	b91b      	cbnz	r3, 8003538 <_printf_i+0x178>
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	f022 0220 	bic.w	r2, r2, #32
 8003536:	6022      	str	r2, [r4, #0]
 8003538:	2210      	movs	r2, #16
 800353a:	e7b1      	b.n	80034a0 <_printf_i+0xe0>
 800353c:	4675      	mov	r5, lr
 800353e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003542:	fb02 3310 	mls	r3, r2, r0, r3
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800354c:	4603      	mov	r3, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	d1f5      	bne.n	800353e <_printf_i+0x17e>
 8003552:	e7b7      	b.n	80034c4 <_printf_i+0x104>
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6949      	ldr	r1, [r1, #20]
 800355a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800355e:	d004      	beq.n	800356a <_printf_i+0x1aa>
 8003560:	1d10      	adds	r0, r2, #4
 8003562:	6018      	str	r0, [r3, #0]
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	6019      	str	r1, [r3, #0]
 8003568:	e007      	b.n	800357a <_printf_i+0x1ba>
 800356a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800356e:	f102 0004 	add.w	r0, r2, #4
 8003572:	6018      	str	r0, [r3, #0]
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	d0f6      	beq.n	8003566 <_printf_i+0x1a6>
 8003578:	8019      	strh	r1, [r3, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	4675      	mov	r5, lr
 8003580:	e7b1      	b.n	80034e6 <_printf_i+0x126>
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	1d11      	adds	r1, r2, #4
 8003586:	6019      	str	r1, [r3, #0]
 8003588:	6815      	ldr	r5, [r2, #0]
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	2100      	movs	r1, #0
 800358e:	4628      	mov	r0, r5
 8003590:	f7fc fe1e 	bl	80001d0 <memchr>
 8003594:	b108      	cbz	r0, 800359a <_printf_i+0x1da>
 8003596:	1b40      	subs	r0, r0, r5
 8003598:	6060      	str	r0, [r4, #4]
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	6123      	str	r3, [r4, #16]
 800359e:	2300      	movs	r3, #0
 80035a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a4:	e79f      	b.n	80034e6 <_printf_i+0x126>
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	462a      	mov	r2, r5
 80035aa:	4639      	mov	r1, r7
 80035ac:	4630      	mov	r0, r6
 80035ae:	47c0      	blx	r8
 80035b0:	3001      	adds	r0, #1
 80035b2:	d0a2      	beq.n	80034fa <_printf_i+0x13a>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	079b      	lsls	r3, r3, #30
 80035b8:	d507      	bpl.n	80035ca <_printf_i+0x20a>
 80035ba:	2500      	movs	r5, #0
 80035bc:	f104 0919 	add.w	r9, r4, #25
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	9a03      	ldr	r2, [sp, #12]
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	429d      	cmp	r5, r3
 80035c8:	db05      	blt.n	80035d6 <_printf_i+0x216>
 80035ca:	68e0      	ldr	r0, [r4, #12]
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	4298      	cmp	r0, r3
 80035d0:	bfb8      	it	lt
 80035d2:	4618      	movlt	r0, r3
 80035d4:	e793      	b.n	80034fe <_printf_i+0x13e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	464a      	mov	r2, r9
 80035da:	4639      	mov	r1, r7
 80035dc:	4630      	mov	r0, r6
 80035de:	47c0      	blx	r8
 80035e0:	3001      	adds	r0, #1
 80035e2:	d08a      	beq.n	80034fa <_printf_i+0x13a>
 80035e4:	3501      	adds	r5, #1
 80035e6:	e7eb      	b.n	80035c0 <_printf_i+0x200>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1a7      	bne.n	800353c <_printf_i+0x17c>
 80035ec:	780b      	ldrb	r3, [r1, #0]
 80035ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f6:	e765      	b.n	80034c4 <_printf_i+0x104>
 80035f8:	080038ee 	.word	0x080038ee
 80035fc:	080038dd 	.word	0x080038dd

08003600 <_sbrk_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4c06      	ldr	r4, [pc, #24]	; (800361c <_sbrk_r+0x1c>)
 8003604:	2300      	movs	r3, #0
 8003606:	4605      	mov	r5, r0
 8003608:	4608      	mov	r0, r1
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	f000 f8b6 	bl	800377c <_sbrk>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d102      	bne.n	800361a <_sbrk_r+0x1a>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	b103      	cbz	r3, 800361a <_sbrk_r+0x1a>
 8003618:	602b      	str	r3, [r5, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	2000024c 	.word	0x2000024c

08003620 <__sread>:
 8003620:	b510      	push	{r4, lr}
 8003622:	460c      	mov	r4, r1
 8003624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003628:	f000 f896 	bl	8003758 <_read_r>
 800362c:	2800      	cmp	r0, #0
 800362e:	bfab      	itete	ge
 8003630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003632:	89a3      	ldrhlt	r3, [r4, #12]
 8003634:	181b      	addge	r3, r3, r0
 8003636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800363a:	bfac      	ite	ge
 800363c:	6563      	strge	r3, [r4, #84]	; 0x54
 800363e:	81a3      	strhlt	r3, [r4, #12]
 8003640:	bd10      	pop	{r4, pc}

08003642 <__swrite>:
 8003642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003646:	461f      	mov	r7, r3
 8003648:	898b      	ldrh	r3, [r1, #12]
 800364a:	05db      	lsls	r3, r3, #23
 800364c:	4605      	mov	r5, r0
 800364e:	460c      	mov	r4, r1
 8003650:	4616      	mov	r6, r2
 8003652:	d505      	bpl.n	8003660 <__swrite+0x1e>
 8003654:	2302      	movs	r3, #2
 8003656:	2200      	movs	r2, #0
 8003658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365c:	f000 f868 	bl	8003730 <_lseek_r>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800366a:	81a3      	strh	r3, [r4, #12]
 800366c:	4632      	mov	r2, r6
 800366e:	463b      	mov	r3, r7
 8003670:	4628      	mov	r0, r5
 8003672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	f000 b817 	b.w	80036a8 <_write_r>

0800367a <__sseek>:
 800367a:	b510      	push	{r4, lr}
 800367c:	460c      	mov	r4, r1
 800367e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003682:	f000 f855 	bl	8003730 <_lseek_r>
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	bf15      	itete	ne
 800368c:	6560      	strne	r0, [r4, #84]	; 0x54
 800368e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003696:	81a3      	strheq	r3, [r4, #12]
 8003698:	bf18      	it	ne
 800369a:	81a3      	strhne	r3, [r4, #12]
 800369c:	bd10      	pop	{r4, pc}

0800369e <__sclose>:
 800369e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a2:	f000 b813 	b.w	80036cc <_close_r>
	...

080036a8 <_write_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4c07      	ldr	r4, [pc, #28]	; (80036c8 <_write_r+0x20>)
 80036ac:	4605      	mov	r5, r0
 80036ae:	4608      	mov	r0, r1
 80036b0:	4611      	mov	r1, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	6022      	str	r2, [r4, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f7ff f864 	bl	8002784 <_write>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_write_r+0x1e>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_write_r+0x1e>
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	2000024c 	.word	0x2000024c

080036cc <_close_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	4c06      	ldr	r4, [pc, #24]	; (80036e8 <_close_r+0x1c>)
 80036d0:	2300      	movs	r3, #0
 80036d2:	4605      	mov	r5, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	f7ff f866 	bl	80027a8 <_close>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d102      	bne.n	80036e6 <_close_r+0x1a>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	b103      	cbz	r3, 80036e6 <_close_r+0x1a>
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	2000024c 	.word	0x2000024c

080036ec <_fstat_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4c07      	ldr	r4, [pc, #28]	; (800370c <_fstat_r+0x20>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4605      	mov	r5, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	f7ff f858 	bl	80027ae <_fstat>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d102      	bne.n	8003708 <_fstat_r+0x1c>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	b103      	cbz	r3, 8003708 <_fstat_r+0x1c>
 8003706:	602b      	str	r3, [r5, #0]
 8003708:	bd38      	pop	{r3, r4, r5, pc}
 800370a:	bf00      	nop
 800370c:	2000024c 	.word	0x2000024c

08003710 <_isatty_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4c06      	ldr	r4, [pc, #24]	; (800372c <_isatty_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4605      	mov	r5, r0
 8003718:	4608      	mov	r0, r1
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	f7ff f84c 	bl	80027b8 <_isatty>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_isatty_r+0x1a>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	b103      	cbz	r3, 800372a <_isatty_r+0x1a>
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	2000024c 	.word	0x2000024c

08003730 <_lseek_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4c07      	ldr	r4, [pc, #28]	; (8003750 <_lseek_r+0x20>)
 8003734:	4605      	mov	r5, r0
 8003736:	4608      	mov	r0, r1
 8003738:	4611      	mov	r1, r2
 800373a:	2200      	movs	r2, #0
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff f83c 	bl	80027bc <_lseek>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_lseek_r+0x1e>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	b103      	cbz	r3, 800374e <_lseek_r+0x1e>
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	2000024c 	.word	0x2000024c

08003754 <__malloc_lock>:
 8003754:	4770      	bx	lr

08003756 <__malloc_unlock>:
 8003756:	4770      	bx	lr

08003758 <_read_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4c07      	ldr	r4, [pc, #28]	; (8003778 <_read_r+0x20>)
 800375c:	4605      	mov	r5, r0
 800375e:	4608      	mov	r0, r1
 8003760:	4611      	mov	r1, r2
 8003762:	2200      	movs	r2, #0
 8003764:	6022      	str	r2, [r4, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f7fe fffc 	bl	8002764 <_read>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_read_r+0x1e>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	b103      	cbz	r3, 8003776 <_read_r+0x1e>
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	2000024c 	.word	0x2000024c

0800377c <_sbrk>:
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <_sbrk+0x14>)
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	4602      	mov	r2, r0
 8003782:	b909      	cbnz	r1, 8003788 <_sbrk+0xc>
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <_sbrk+0x18>)
 8003786:	6019      	str	r1, [r3, #0]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	4402      	add	r2, r0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	4770      	bx	lr
 8003790:	20000090 	.word	0x20000090
 8003794:	20000250 	.word	0x20000250

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
